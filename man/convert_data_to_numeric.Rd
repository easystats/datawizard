% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_data_to_numeric.R
\name{convert_data_to_numeric}
\alias{convert_data_to_numeric}
\alias{data_to_numeric}
\alias{convert_data_to_numeric.data.frame}
\title{Convert data to numeric}
\usage{
convert_data_to_numeric(x, ...)

data_to_numeric(x, ...)

\method{convert_data_to_numeric}{data.frame}(
  x,
  dummy_factors = TRUE,
  preserve_levels = FALSE,
  lowest = NULL,
  append = FALSE,
  select = NULL,
  exclude = NULL,
  ignore_case = FALSE,
  ...
)
}
\arguments{
\item{x}{A data frame, factor or vector.}

\item{...}{Arguments passed to or from other methods.}

\item{dummy_factors}{Transform factors to dummy factors (all factor levels as
different columns filled with a binary 0-1 value).}

\item{preserve_levels}{Logical, only applies if \code{x} is a factor. If \code{TRUE},
and \code{x} has numeric factor levels, these will be converted into the related
numeric values. If this is not possible, the converted numeric values will
start from 1 to number of levels.}

\item{lowest}{Numeric, indicating the lowest (minimum) value when converting
factors or character vectors to numeric values.}

\item{append}{Logical or string. If \code{TRUE}, recoded or converted variables
get new column names and are appended (column bind) to \code{x}, thus returning
both the original and the recoded variables. The new columns get a suffix,
based on the calling function: \code{"_r"} for recode functions, \verb{="_n"} for
\code{data_to_numeric()}, \code{"_f"} for \code{data_to_factor()}, or \code{"_s"} for
\code{data_shift()}. If \code{append=FALSE}, original variables in \code{x} will be
overwritten by their recoded versions. If a character value, recoded
variables are appended with new column names (using the defined suffix) to
the original data frame.}

\item{select}{Variables that will be included when performing the required
tasks. Can be either
\itemize{
\item a variable specified as a literal variable name (e.g., \code{column_name}),
\item a string with the variable name (e.g., \code{"column_name"}), or a character
vector of variable names (e.g., \code{c("col1", "col2", "col3")}),
\item a formula with variable names (e.g., \code{~column_1 + column_2}),
\item a vector of positive integers, giving the positions counting from the left
(e.g. \code{1} or \code{c(1, 3, 5)}),
\item a vector of negative integers, giving the positions counting from the
right (e.g., \code{-1} or \code{-1:-3}),
\item one of the following select-helpers: \code{starts_with("")}, \code{ends_with("")},
\code{contains("")}, a range using \code{:} or \code{regex("")},
\item or a function testing for logical conditions, e.g. \code{is.numeric()} (or
\code{is.numeric}), or any user-defined function that selects the variables
for which the function returns \code{TRUE} (like: \code{foo <- function(x) mean(x) > 3}),
\item ranges specified via literal variable names, select-helpers (except
\code{regex()}) and a small selection of functions (\code{is.numeric}, \code{is.factor},
\code{is.character}, \code{is.integer} and \code{is.logical}) can be negated, i.e.
return non-matching elements, when prefixed with a \code{-}, e.g.
\code{-ends_with("")}, \code{-is.numeric} or \code{-Sepal.Width:Petal.Length}.
}

If \code{NULL}, selects all columns.}

\item{exclude}{See \code{select}, however, column names matched by the pattern
from \code{exclude} will be excluded instead of selected. If \code{NULL} (the default),
excludes no columns.}

\item{ignore_case}{Logical, if \code{TRUE} and when one of the select-helpers or
a regular expression is used in \code{select}, ignores lower/upper case in the
search pattern when matching against variable names.}
}
\value{
A data frame of numeric variables.
}
\description{
Convert data to numeric by converting characters to factors and factors to
either numeric levels or dummy variables. The "counterpart" to convert
variables into factors is \code{data_to_factor()}.
}
\examples{
convert_data_to_numeric(head(ToothGrowth))
convert_data_to_numeric(head(ToothGrowth), dummy_factors = FALSE)

# factors
x <- as.factor(mtcars$gear)
data_to_numeric(x, dummy_factors = FALSE)
data_to_numeric(x, dummy_factors = FALSE, preserve_levels = TRUE)

}
