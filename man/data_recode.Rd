% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_recode.R
\name{data_recode}
\alias{data_recode}
\alias{data_recode.numeric}
\alias{data_recode.data.frame}
\title{Recode old values of variables into new values}
\usage{
data_recode(x, ...)

\method{data_recode}{numeric}(x, recodes = NULL, verbose = TRUE, ...)

\method{data_recode}{data.frame}(
  x,
  recodes = NULL,
  force = FALSE,
  append = FALSE,
  select = NULL,
  exclude = NULL,
  ignore_case = FALSE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{x}{A data frame, numeric or character vector, or factor.}

\item{...}{not used.}

\item{recodes}{A list of named vectors, which indicate the recode pairs.
The \emph{names} of the list-elements (i.e. the left-hand side) represent the
old values, while the values of the list-elements indicate the values.
When recoding numeric vectors, element names have to be surrounded in
backticks. For example, \code{recodes = list(`1` = 0)} would recode all
\code{1} into \code{0} in a numeric vector. For factors, backticks are only required
when the left-hand side contains multiple, comma separated values, e.g.
\code{recodes = list(a = "x", `b, c` = "y")}. See also 'Examples'.}

\item{verbose}{Toggle warnings.}

\item{force}{Logical, if \code{TRUE}, forces recoding of factors as well.}

\item{append}{Logical or string. If \code{TRUE}, recoded variables get new
column names (with the suffix \code{"_r"}) and are appended (column bind) to \code{x},
thus returning both the original and the recoded variables. If \code{FALSE},
original variables in \code{x} will be overwritten by their recoded versions.
If a character value, recoded variables are appended with new column
names (using the defined suffix) to the original data frame.}

\item{select}{Variables that will be included when performing the required
tasks. Can be either
\itemize{
\item a variable specified as a literal variable name (e.g., \code{column_name}),
\item a string with the variable name (e.g., \code{"column_name"}), or a character
vector of variable names (e.g., \code{c("col1", "col2", "col3")}),
\item a formula with variable names (e.g., \code{~column_1 + column_2}),
\item a vector of positive integers, giving the positions counting from the left
(e.g. \code{1} or \code{c(1, 3, 5)}),
\item a vector of negative integers, giving the positions counting from the
right (e.g., \code{-1} or \code{-1:-3}),
\item or one of the following select-helpers: \code{starts_with("")}, \code{ends_with("")},
\code{contains("")}, a range using \code{:} or \code{regex("")}.
}

If \code{NULL}, selects all columns.}

\item{exclude}{See \code{select}, however, column names matched by the pattern
from \code{exclude} will be excluded instead of selected. If \code{NULL} (the default),
excludes no columns.}

\item{ignore_case}{Logical, if \code{TRUE} and when one of the select-helpers or
a regular expression is used in \code{select}, ignores lower/upper case in the
search pattern when matching against variable names.}
}
\value{
\code{x}, where old values are replaced by new values.
}
\description{
This functions recodes old values into new values and can be used to to
recode numeric or character vectors, or factors.
}
\examples{
# numeric
set.seed(123)
x <- sample(c(1:4, NA), 15, TRUE)
table(x, useNA = "always")

out <- data_recode(x, list(`1` = 0, `2:3` = 1, `4` = 2))
out
table(out, useNA = "always")

out <- data_recode(x, list(`1` = 0, `2:3` = 1, `4` = 2, `NA` = 9))
out
table(out, useNA = "always")

out <- data_recode(x, list(`1` = 0, `2:3` = 1, `else` = 77))
out
table(out, useNA = "always")


# factors
set.seed(123)
x <- as.factor(sample(c("a", "b", "c"), 15, TRUE))
table(x)

out <- data_recode(x, list(a = "x", `b, c` = "y"))
out
table(out)

out <- data_recode(x, list(a = "x", b = "y", c = "z"))
out
table(out)

out <- data_recode(x, list(`b, c` = "y", `else` = 77))
out
table(out)


# character
set.seed(123)
x <- as.character(sample(c("a", "b", "c"), 15, TRUE))
table(x)

out <- data_recode(x, list(a = "x", `b, c` = "y"))
out
table(out)

out <- data_recode(x, list(a = "x", b = "y", c = "z"))
out
table(out)
}
