% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_recode.R
\name{data_recode}
\alias{data_recode}
\alias{data_recode.numeric}
\alias{data_recode.data.frame}
\title{Recode old values of variables into new values}
\usage{
data_recode(x, ...)

\method{data_recode}{numeric}(x, recodes = NULL, verbose = TRUE, ...)

\method{data_recode}{data.frame}(
  x,
  recodes = NULL,
  force = FALSE,
  append = FALSE,
  select = NULL,
  exclude = NULL,
  ignore_case = FALSE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{x}{A data frame, numeric or character vector, or factor.}

\item{...}{not used.}

\item{recodes}{A list of named vectors, which indicate the recode pairs.
The \emph{names} of the list-elements (i.e. the left-hand side) represent the
\emph{new} values, while the values of the list-elements indicate the original
(old) values that should be replaced. When recoding numeric vectors,
element names have to be surrounded in backticks. For example,
\code{recodes = list(`0` = 1)} would recode all \code{1} into \code{0} in a numeric
vector. See also 'Examples' and 'Details'.}

\item{verbose}{Toggle warnings.}

\item{force}{Logical, if \code{TRUE}, forces recoding of factors as well.}

\item{append}{Logical or string. If \code{TRUE}, recoded variables get new
column names (with the suffix \code{"_r"}) and are appended (column bind) to \code{x},
thus returning both the original and the recoded variables. If \code{FALSE},
original variables in \code{x} will be overwritten by their recoded versions.
If a character value, recoded variables are appended with new column
names (using the defined suffix) to the original data frame.}

\item{select}{Variables that will be included when performing the required
tasks. Can be either
\itemize{
\item a variable specified as a literal variable name (e.g., \code{column_name}),
\item a string with the variable name (e.g., \code{"column_name"}), or a character
vector of variable names (e.g., \code{c("col1", "col2", "col3")}),
\item a formula with variable names (e.g., \code{~column_1 + column_2}),
\item a vector of positive integers, giving the positions counting from the left
(e.g. \code{1} or \code{c(1, 3, 5)}),
\item a vector of negative integers, giving the positions counting from the
right (e.g., \code{-1} or \code{-1:-3}),
\item or one of the following select-helpers: \code{starts_with("")}, \code{ends_with("")},
\code{contains("")}, a range using \code{:} or \code{regex("")}.
}

If \code{NULL}, selects all columns.}

\item{exclude}{See \code{select}, however, column names matched by the pattern
from \code{exclude} will be excluded instead of selected. If \code{NULL} (the default),
excludes no columns.}

\item{ignore_case}{Logical, if \code{TRUE} and when one of the select-helpers or
a regular expression is used in \code{select}, ignores lower/upper case in the
search pattern when matching against variable names.}
}
\value{
\code{x}, where old values are replaced by new values.
}
\description{
This functions recodes old values into new values and can be used to to
recode numeric or character vectors, or factors.
}
\details{
This section describes the pattern of the \code{recodes} arguments, which also
provides some shortcuts, in particular when recoding numeric values.
\itemize{
\item Single values

Single values either need to be wrapped in backticks (in case of numeric
values) or "as is" (for character or factor levels). Example:
\code{recodes=list(`0`=1,`1`=2)} would recode 1 into 0, and 2 into 1.
For factors or character vectors, an example is:
\code{recodes=list(x="a",y="b")} (recode "a" into "x" and "b" into "y").
\item Multiple values

Multiple values that should be recoded into a new value can be separated
with comma. Example: \code{recodes=list(`1`=c(1,4),`2`=c(2,3))} would recode the
values 1 and 4 into 1, and 2 and 3 into 2. It is also possible to define  the
old values as a character string, like:  \code{recodes=list(`1`="1,4",`2`="2,3")}
For factors or character vectors, an example is:
\code{recodes=list(x=c("a","b"),y=c("c","d"))}.
\item Value range

Numeric value ranges can be defined using the \code{:}. Example:
\code{recodes=list(`1`=1:3,`2`=4:6)} would recode all values from 1 to 3 into
1, and 4 to 6 into 2.
\item \code{min} and \code{max}

placeholder to use the minimum or maximum value of the
(numeric) variable. Useful, e.g., when recoding ranges of values.
Example: \verb{recodes=list(`1`="min:10",2="11:max")}.
\item \code{default} values

defines the default value for all values that have no match in the
recode-pairs. Example: \code{recodes=list(`1`=c(1,2),`2`=c(3,4),default=9)} would
recode values 1 and 2 into 1, 3 and 4 into 2, and all other values (no
matter if missing or any numeric value other than 1 to 4) into 5.
\item Reversing and rescaling

See \code{\link[=data_reverse]{data_reverse()}} and \code{\link[=data_rescale]{data_rescale()}}.
}
}
\examples{
# numeric
set.seed(123)
x <- sample(c(1:4, NA), 15, TRUE)
table(x, useNA = "always")

out <- data_recode(x, list(`0` = 1, `1` = 2:3, `2` = 4))
out
table(out, useNA = "always")

out <- data_recode(x, list(`0` = 1, `1` = 2:3, `2` = 4, `9` = NA))
out
table(out, useNA = "always")

out <- data_recode(x, list(`0` = 1, `1` = 2:3, default = 77))
out
table(out, useNA = "always")


# factors (character vectors are similar)
set.seed(123)
x <- as.factor(sample(c("a", "b", "c"), 15, TRUE))
table(x)

out <- data_recode(x, list(x = "a", y = c("b", "c")))
out
table(out)

out <- data_recode(x, list(x = "a", y = "b", z = "c"))
out
table(out)

out <- data_recode(x, list(y = "b,c", default = 77))
# same as
# data_recode(x, list(y = c("b", "c"), default = 77))
out
table(out)


# data frames
set.seed(123)
d <- data.frame(
  x = sample(c(1:4, NA), 12, TRUE),
  y = as.factor(sample(c("a", "b", "c"), 12, TRUE)),
  stringsAsFactors = FALSE
)

data_recode(
  d,
  recodes = list(`0` = 1, `1` = 2:3, `2` = 4, x = "a", y = c("b", "c")),
  force = TRUE,
  append = TRUE
)
}
\seealso{
\itemize{
\item Functions to rename stuff: \code{\link[=data_rename]{data_rename()}}, \code{\link[=data_rename_rows]{data_rename_rows()}}, \code{\link[=data_addprefix]{data_addprefix()}}, \code{\link[=data_addsuffix]{data_addsuffix()}}
\item Functions to reorder or remove columns: \code{\link[=data_reorder]{data_reorder()}}, \code{\link[=data_relocate]{data_relocate()}}, \code{\link[=data_remove]{data_remove()}}
\item Functions to reshape, pivot or rotate dataframes: \code{\link[=data_to_long]{data_to_long()}}, \code{\link[=data_to_wide]{data_to_wide()}}, \code{\link[=data_rotate]{data_rotate()}}
\item Functions to recode data: \code{\link[=data_rescale]{data_rescale()}}, \code{\link[=data_reverse]{data_reverse()}}, \code{\link[=data_cut]{data_cut()}}, \code{\link[=data_recode]{data_recode()}}
\item Functions to standardize, normalize, rank-transform: \code{\link[=standardize]{standardize()}}, \code{\link[=normalize]{normalize()}}, \code{\link[=ranktransform]{ranktransform()}}, \code{\link[=winsorize]{winsorize()}}
\item Split and merge dataframes: \code{\link[=data_partition]{data_partition()}}, \code{\link[=data_merge]{data_merge()}}
\item Functions to find or select columns: \code{\link[=data_select]{data_select()}}, \code{\link[=find_columns]{find_columns()}}
\item Functions to filter rows: \code{\link[=data_match]{data_match()}}, \code{\link[=data_filter]{data_filter()}}
}
}
