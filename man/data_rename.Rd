% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_addprefix.R, R/data_rename.R
\name{data_addprefix}
\alias{data_addprefix}
\alias{data_addsuffix}
\alias{data_rename}
\alias{data_rename_rows}
\title{Rename columns and variable names}
\usage{
data_addprefix(
  data,
  pattern,
  select = NULL,
  exclude = NULL,
  ignore_case = FALSE,
  regex = FALSE,
  verbose = TRUE,
  ...
)

data_addsuffix(
  data,
  pattern,
  select = NULL,
  exclude = NULL,
  ignore_case = FALSE,
  regex = FALSE,
  verbose = TRUE,
  ...
)

data_rename(
  data,
  select = NULL,
  replacement = NULL,
  safe = TRUE,
  verbose = TRUE,
  pattern = NULL,
  ...
)

data_rename_rows(data, rows = NULL)
}
\arguments{
\item{data}{A data frame, or an object that can be coerced to a data frame.}

\item{pattern}{Deprecated. Use \code{select} instead.}

\item{select}{Character vector.
\itemize{
\item For \code{data_addprefix()} or \code{data_addsuffix()}, a character string, which
will be added as prefix or suffix to the column names.
\item For \code{data_rename()}, indicates columns that should be selected for
renaming. Can be \code{NULL} (in which case all columns are selected).
\code{select} can also be a named vector. In this case, names are used as
values for the \code{replacement} argument (i.e. \code{select} can be a character
vector using \verb{<new name> = "<old name>"} and argument \code{replacement} will
be ignored then).
}}

\item{exclude}{See \code{select}, however, column names matched by the pattern
from \code{exclude} will be excluded instead of selected. If \code{NULL} (the default),
excludes no columns.}

\item{ignore_case}{Logical, if \code{TRUE} and when one of the select-helpers or
a regular expression is used in \code{select}, ignores lower/upper case in the
search pattern when matching against variable names.}

\item{regex}{Logical, if \code{TRUE}, the search pattern from \code{select} will be
treated as regular expression. When \code{regex = TRUE}, select \emph{must} be a
character string (or a variable containing a character string) and is not
allowed to be one of the supported select-helpers or a character vector
of length > 1. \code{regex = TRUE} is comparable to using one of the two
select-helpers, \code{select = contains()} or \code{select = regex()}, however,
since the select-helpers may not work when called from inside other
functions (see 'Details'), this argument may be used as workaround.}

\item{verbose}{Toggle warnings and messages.}

\item{...}{Other arguments passed to or from other functions.}

\item{replacement}{Character vector. Can be one of the following:
\itemize{
\item A character vector that indicates the new names of the columns selected
in \code{select}. \code{select} and \code{replacement} must be of the same length.
\item \code{NULL}, in which case columns are numbered in sequential order.
\item A string (i.e. character vector of length 1) with a "glue" styled pattern.
Currently supported tokens are:
\itemize{
\item \code{{col}} which will be replaced by the column name, i.e. the
corresponding value in \code{select}.
\item \code{{n}} will be replaced by the number of the variable that is replaced.
\item \code{{letter}} will be replaced by alphabetical letters in sequential order.
If more than 26 letters are required, letters are repeated, but have
sequential numeric indices (e.g., \code{a1} to \code{z1}, followed by \code{a2} to \code{z2}).
\item Finally, the name of a user-defined object that is available in the
environment can be used. Note that the object's name is not allowed to
be one of the pre-defined tokens, \code{"col"}, \code{"n"} and \code{"letter"}.
}

An example for the use of tokens is...

\if{html}{\out{<div class="sourceCode r">}}\preformatted{data_rename(
  mtcars,
  select = c("am", "vs"),
  replacement = "new_name_from_\{col\}"
)
}\if{html}{\out{</div>}}

... which would return new column names \code{new_name_from_am} and
\code{new_name_from_vs}. See 'Examples'.
}

If \code{select} is a named vector, \code{replacement} is ignored.}

\item{safe}{Do not throw error if for instance the variable to be
renamed/removed doesn't exist.}

\item{rows}{Vector of row names.}
}
\value{
A modified data frame.
}
\description{
Safe and intuitive functions to rename variables or rows in
data frames. \code{data_rename()} will rename column names, i.e. it facilitates
renaming variables \code{data_addprefix()} or \code{data_addsuffix()} add prefixes
or suffixes to column names. \code{data_rename_rows()} is a convenient shortcut
to add or rename row names of a data frame, but unlike \code{row.names()}, its
input and output is a data frame, thus, integrating smoothly into a possible
pipe-workflow.
}
\examples{
# Add prefix / suffix to all columns
head(data_addprefix(iris, "NEW_"))
head(data_addsuffix(iris, "_OLD"))

# Rename columns
head(data_rename(iris, "Sepal.Length", "length"))
# data_rename(iris, "FakeCol", "length", safe=FALSE)  # This fails
head(data_rename(iris, "FakeCol", "length")) # This doesn't
head(data_rename(iris, c("Sepal.Length", "Sepal.Width"), c("length", "width")))

# use named vector to rename
head(data_rename(iris, c(length = "Sepal.Length", width = "Sepal.Width")))

# Reset names
head(data_rename(iris, NULL))

# Change all
head(data_rename(iris, replacement = paste0("Var", 1:5)))

# Use glue-styled patterns
head(data_rename(mtcars[1:3], c("mpg", "cyl", "disp"), "formerly_{col}"))
head(data_rename(mtcars[1:3], c("mpg", "cyl", "disp"), "{col}_is_column_{n}"))
head(data_rename(mtcars[1:3], c("mpg", "cyl", "disp"), "new_{letter}"))

# User-defined glue-styled patterns from objects in environment
x <- c("hi", "there", "!")
head(data_rename(mtcars[1:3], c("mpg", "cyl", "disp"), "col_{x}"))
}
\seealso{
\itemize{
\item Functions to rename stuff: \code{\link[=data_rename]{data_rename()}}, \code{\link[=data_rename_rows]{data_rename_rows()}},
\code{\link[=data_addprefix]{data_addprefix()}}, \code{\link[=data_addsuffix]{data_addsuffix()}}
\item Functions to reorder or remove columns: \code{\link[=data_reorder]{data_reorder()}}, \code{\link[=data_relocate]{data_relocate()}},
\code{\link[=data_remove]{data_remove()}}
\item Functions to reshape, pivot or rotate data frames: \code{\link[=data_to_long]{data_to_long()}},
\code{\link[=data_to_wide]{data_to_wide()}}, \code{\link[=data_rotate]{data_rotate()}}
\item Functions to recode data: \code{\link[=rescale]{rescale()}}, \code{\link[=reverse]{reverse()}}, \code{\link[=categorize]{categorize()}},
\code{\link[=recode_values]{recode_values()}}, \code{\link[=slide]{slide()}}
\item Functions to standardize, normalize, rank-transform: \code{\link[=center]{center()}}, \code{\link[=standardize]{standardize()}},
\code{\link[=normalize]{normalize()}}, \code{\link[=ranktransform]{ranktransform()}}, \code{\link[=winsorize]{winsorize()}}
\item Split and merge data frames: \code{\link[=data_partition]{data_partition()}}, \code{\link[=data_merge]{data_merge()}}
\item Functions to find or select columns: \code{\link[=data_select]{data_select()}}, \code{\link[=extract_column_names]{extract_column_names()}}
\item Functions to filter rows: \code{\link[=data_match]{data_match()}}, \code{\link[=data_filter]{data_filter()}}
}
}
