
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "marginaleffects"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('marginaleffects')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("comparisons")
> ### * comparisons
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comparisons
> ### Title: Contrasts Between Adjusted Predictions
> ### Aliases: comparisons
> 
> ### ** Examples
> 
> 
> library(marginaleffects)
> library(magrittr)
> 
> # Linear model
> tmp <- mtcars
> tmp$am <- as.logical(tmp$am)
> mod <- lm(mpg ~ am + factor(cyl), tmp)
> comparisons(mod, variables = list(cyl = "reference")) %>% tidy()
Warning: The `cyl` variable is treated as a categorical (factor) variable, but
  the original data is of class numeric. It is safer and faster to convert
  such variables to factor before fitting the model and calling
  `marginaleffects` functions.
  
  This warning appears once per session.
      type term contrast   estimate std.error statistic      p.value   conf.low
1 response  cyl    6 - 4  -6.156118  1.535723 -4.008612 6.107658e-05  -9.166079
2 response  cyl    8 - 4 -10.067560  1.452082 -6.933187 4.114626e-12 -12.913589
  conf.high
1 -3.146156
2 -7.221530
> comparisons(mod, variables = list(cyl = "sequential")) %>% tidy()
      type term contrast  estimate std.error statistic      p.value  conf.low
1 response  cyl    6 - 4 -6.156118  1.535723 -4.008612 6.107658e-05 -9.166079
2 response  cyl    8 - 6 -3.911442  1.470254 -2.660385 7.805144e-03 -6.793087
  conf.high
1 -3.146156
2 -1.029797
> comparisons(mod, variables = list(cyl = "pairwise")) %>% tidy()
      type term contrast   estimate std.error statistic      p.value   conf.low
1 response  cyl    6 - 4  -6.156118  1.535723 -4.008612 6.107658e-05  -9.166079
2 response  cyl    8 - 4 -10.067560  1.452082 -6.933187 4.114626e-12 -12.913589
3 response  cyl    8 - 6  -3.911442  1.470254 -2.660385 7.805144e-03  -6.793087
  conf.high
1 -3.146156
2 -7.221530
3 -1.029797
> 
> # GLM with different scale types
> mod <- glm(am ~ factor(gear), data = mtcars)
> comparisons(mod, type = "response") %>% tidy()
      type term contrast  estimate std.error statistic      p.value  conf.low
1 response gear    4 - 3 0.6666667 0.1174440  5.676462 1.375090e-08 0.4364806
2 response gear    5 - 3 1.0000000 0.1565921  6.386020 1.702589e-10 0.6930852
  conf.high
1 0.8968528
2 1.3069148
> comparisons(mod, type = "link") %>% tidy()
  type term contrast  estimate std.error statistic      p.value  conf.low
1 link gear    4 - 3 0.6666667 0.1174440  5.676462 1.375090e-08 0.4364806
2 link gear    5 - 3 1.0000000 0.1565921  6.386020 1.702589e-10 0.6930852
  conf.high
1 0.8968528
2 1.3069148
> 
> # Contrasts at the mean
> comparisons(mod, newdata = "mean")
  rowid     type term contrast comparison std.error statistic      p.value
1     1 response gear    4 - 3  0.6666667 0.1174440  5.676462 1.375090e-08
2     1 response gear    5 - 3  1.0000000 0.1565921  6.386020 1.702589e-10
   conf.low conf.high    predicted predicted_hi predicted_lo      am gear
1 0.4364806 0.8968528 1.177569e-16    0.6666667 1.177569e-16 0.40625    3
2 0.6930852 1.3069148 1.177569e-16    1.0000000 1.177569e-16 0.40625    3
> 
> # Contrasts between marginal means
> comparisons(mod, newdata = "marginalmeans")
      type term contrast comparison std.error statistic      p.value  conf.low
1 response gear    4 - 3  0.6666667 0.1174440  5.676462 1.375090e-08 0.4364806
2 response gear    5 - 3  1.0000000 0.1565921  6.386020 1.702589e-10 0.6930852
  conf.high predicted predicted_hi predicted_lo
1 0.8968528 0.5555556    0.6666667 1.177569e-16
2 1.3069148 0.5555556    1.0000000 1.177569e-16
> 
> # Contrasts at user-specified values
> comparisons(mod, newdata = datagrid(am = 0, gear = tmp$gear))
  rowid     type term contrast comparison std.error statistic      p.value
1     1 response gear    4 - 3  0.6666667 0.1174440  5.676462 1.375090e-08
2     2 response gear    4 - 3  0.6666667 0.1174440  5.676462 1.375090e-08
3     3 response gear    4 - 3  0.6666667 0.1174440  5.676462 1.375090e-08
4     1 response gear    5 - 3  1.0000000 0.1565921  6.386020 1.702589e-10
5     2 response gear    5 - 3  1.0000000 0.1565921  6.386020 1.702589e-10
6     3 response gear    5 - 3  1.0000000 0.1565921  6.386020 1.702589e-10
   conf.low conf.high    predicted predicted_hi predicted_lo am gear
1 0.4364806 0.8968528 6.666667e-01    0.6666667 1.177569e-16  0    4
2 0.4364806 0.8968528 1.177569e-16    0.6666667 1.177569e-16  0    3
3 0.4364806 0.8968528 1.000000e+00    0.6666667 1.177569e-16  0    5
4 0.6930852 1.3069148 6.666667e-01    1.0000000 1.177569e-16  0    4
5 0.6930852 1.3069148 1.177569e-16    1.0000000 1.177569e-16  0    3
6 0.6930852 1.3069148 1.000000e+00    1.0000000 1.177569e-16  0    5
> comparisons(mod, newdata = datagrid(am = unique, gear = max))
  rowid     type term contrast comparison std.error statistic      p.value
1     1 response gear    4 - 3  0.6666667 0.1174440  5.676462 1.375090e-08
2     2 response gear    4 - 3  0.6666667 0.1174440  5.676462 1.375090e-08
3     1 response gear    5 - 3  1.0000000 0.1565921  6.386020 1.702589e-10
4     2 response gear    5 - 3  1.0000000 0.1565921  6.386020 1.702589e-10
   conf.low conf.high predicted predicted_hi predicted_lo am gear
1 0.4364806 0.8968528         1    0.6666667 1.177569e-16  1    5
2 0.4364806 0.8968528         1    0.6666667 1.177569e-16  0    5
3 0.6930852 1.3069148         1    1.0000000 1.177569e-16  1    5
4 0.6930852 1.3069148         1    1.0000000 1.177569e-16  0    5
> 
> m <- lm(mpg ~ hp + drat + factor(cyl) + factor(am), data = mtcars)
> comparisons(m, variables = "hp", newdata = datagrid(FUN_factor = unique, FUN_numeric = median))
  rowid     type term contrast  comparison  std.error statistic     p.value
1     1 response   hp       +1 -0.04522926 0.01489036 -3.037487 0.002385599
2     2 response   hp       +1 -0.04522926 0.01489036 -3.037487 0.002385599
3     3 response   hp       +1 -0.04522926 0.01489036 -3.037487 0.002385599
4     4 response   hp       +1 -0.04522926 0.01489036 -3.037487 0.002385599
5     5 response   hp       +1 -0.04522926 0.01489036 -3.037487 0.002385599
6     6 response   hp       +1 -0.04522926 0.01489036 -3.037487 0.002385599
     conf.low  conf.high predicted predicted_hi predicted_lo  mpg  hp  drat cyl
1 -0.07441382 -0.0160447  21.95333     21.93072     21.97595 19.2 123 3.695   6
2 -0.07441382 -0.0160447  18.18910     18.16648     18.21171 19.2 123 3.695   6
3 -0.07441382 -0.0160447  25.54890     25.52628     25.57151 19.2 123 3.695   4
4 -0.07441382 -0.0160447  21.78467     21.76205     21.80728 19.2 123 3.695   4
5 -0.07441382 -0.0160447  22.61705     22.59444     22.63967 19.2 123 3.695   8
6 -0.07441382 -0.0160447  18.85282     18.83020     18.87543 19.2 123 3.695   8
  am    eps
1  1 0.0283
2  0 0.0283
3  1 0.0283
4  0 0.0283
5  1 0.0283
6  0 0.0283
> 
> 
> # Numeric contrasts
> mod <- lm(mpg ~ hp, data = mtcars)
> comparisons(mod, variables = list(hp = 1)) %>% tidy()
      type term contrast    estimate std.error statistic      p.value
1 response   hp       +1 -0.06822828 0.0101193 -6.742389 1.558037e-11
     conf.low   conf.high
1 -0.08806175 -0.04839481
> comparisons(mod, variables = list(hp = 5)) %>% tidy()
      type term contrast   estimate  std.error statistic      p.value
1 response   hp       +5 -0.3411414 0.05059652 -6.742389 1.558038e-11
    conf.low conf.high
1 -0.4403087 -0.241974
> comparisons(mod, variables = list(hp = c(90, 100))) %>% tidy()
      type term contrast   estimate std.error statistic      p.value   conf.low
1 response   hp 100 - 90 -0.6822828  0.101193 -6.742389 1.558038e-11 -0.8806175
   conf.high
1 -0.4839481
> comparisons(mod, variables = list(hp = "iqr")) %>% tidy()
      type term contrast  estimate std.error statistic      p.value  conf.low
1 response   hp  Q3 - Q1 -5.697061 0.8449619 -6.742389 1.558038e-11 -7.353156
  conf.high
1 -4.040966
> comparisons(mod, variables = list(hp = "sd")) %>% tidy()
      type term                contrast  estimate std.error statistic
1 response   hp (x + sd/2) - (x - sd/2) -4.677926 0.6938085 -6.742389
       p.value  conf.low conf.high
1 1.558038e-11 -6.037766 -3.318087
> comparisons(mod, variables = list(hp = "minmax")) %>% tidy()
      type term  contrast estimate std.error statistic      p.value  conf.low
1 response   hp Max - Min -19.3086  2.863763 -6.742389 1.558038e-11 -24.92147
  conf.high
1 -13.69573
> 
> # using a function to specify a custom difference in one regressor
> dat <- mtcars
> dat$new_hp <- 49 * (dat$hp - min(dat$hp)) / (max(dat$hp) - min(dat$hp)) + 1
> modlog <- lm(mpg ~ log(new_hp) + factor(cyl), data = dat)
> fdiff <- \(x) data.frame(x, x + 10)
> comparisons(modlog, variables = list(new_hp = fdiff)) %>% summary()
    Term Contrast Effect Std. Error z value  Pr(>|z|)  2.5 %  97.5 %
1 new_hp   custom -1.974     0.7105  -2.778 0.0054696 -3.366 -0.5812

Model type:  lm 
Prediction type:  response 
> 
> # Adjusted Risk Ratio: see the contrasts vignette
> mod <- glm(vs ~ mpg, data = mtcars, family = binomial)
> cmp <- comparisons(mod, transform_pre = "lnratioavg")
> summary(cmp, transform_avg = exp)
  Term Contrast Effect   Pr(>|z|) 2.5 % 97.5 %
1  mpg mean(+1)  1.135 2.3808e-10 1.091   1.18

Model type:  glm 
Prediction type:  response 
Average-transformation:  exp 
> 
> # Adjusted Risk Ratio: Manual specification of the `transform_pre`
> cmp <- comparisons(mod, transform_pre = function(hi, lo) log(mean(hi) / mean(lo)))
> summary(cmp, transform_avg = exp)
  Term Contrast Effect   Pr(>|z|) 2.5 % 97.5 %
1  mpg       +1  1.135 2.3808e-10 1.091   1.18

Model type:  glm 
Prediction type:  response 
Pre-transformation:  function(hi, lo) log(mean(hi)/mean(lo)) 
Average-transformation:  exp 
> # cross contrasts
> mod <- lm(mpg ~ factor(cyl) * factor(gear) + hp, data = mtcars)
> cmp <- comparisons(mod, variables = c("cyl", "gear"), cross = TRUE)
Warning: Model matrix is rank deficient. Some variance-covariance parameters are
  missing.
> summary(cmp)
   Term contrast_cyl contrast_gear  Effect Std. Error z value Pr(>|z|)  2.5 %
1 cross        6 - 4         4 - 3 -0.6306      3.405 -0.1852  0.85307 -7.303
2 cross        6 - 4         5 - 3  2.6778      4.617  0.5800  0.56193 -6.372
3 cross        8 - 4         4 - 3  3.3475      6.427  0.5208  0.60249 -9.250
4 cross        8 - 4         5 - 3  5.5250      5.868  0.9416  0.34642 -5.976
  97.5 %
1  6.042
2 11.727
3 15.945
4 17.026

Model type:  lm 
Prediction type:  response 
> 
> # variable-specific contrasts
> cmp <- comparisons(mod, variables = list(gear = "sequential", hp = 10))
Warning: Model matrix is rank deficient. Some variance-covariance parameters are
  missing.
> summary(cmp)
  Term Contrast  Effect Std. Error z value Pr(>|z|)  2.5 %  97.5 %
1 gear    4 - 3  3.4095      2.587  1.3177 0.187591 -1.662  8.4806
2 gear    5 - 4  2.6277      2.747  0.9566 0.338744 -2.756  8.0113
3   hp      +10 -0.5741      0.225 -2.5518 0.010718 -1.015 -0.1331

Model type:  lm 
Prediction type:  response 
> 
> # hypothesis test: is the `hp` marginal effect at the mean equal to the `drat` marginal effect
> mod <- lm(mpg ~ wt + drat, data = mtcars)
> 
> comparisons(
+     mod,
+     newdata = "mean",
+     hypothesis = "wt = drat")
      type    term comparison std.error statistic      p.value conf.low
1 response wt=drat  -6.225381  1.051769 -5.918963 3.239776e-09 -8.28681
  conf.high
1 -4.163952
> 
> # same hypothesis test using row indices
> comparisons(
+     mod,
+     newdata = "mean",
+     hypothesis = "b1 - b2 = 0")
      type    term comparison std.error statistic      p.value conf.low
1 response b1-b2=0  -6.225381  1.051769 -5.918963 3.239776e-09 -8.28681
  conf.high
1 -4.163952
> 
> # same hypothesis test using numeric vector of weights
> comparisons(
+     mod,
+     newdata = "mean",
+     hypothesis = c(1, -1))
      type   term comparison std.error statistic      p.value conf.low
1 response custom  -6.225381  1.051769 -5.918963 3.239776e-09 -8.28681
  conf.high
1 -4.163952
> 
> # two custom contrasts using a matrix of weights
> lc <- matrix(c(
+     1, -1,
+     2, 3),
+     ncol = 2)
> comparisons(
+     mod,
+     newdata = "mean",
+     hypothesis = lc)
      type   term comparison std.error  statistic      p.value  conf.low
1 response custom  -6.225381  1.051769 -5.9189631 3.239776e-09  -8.28681
2 response custom  -5.238308  5.623757 -0.9314607 3.516153e-01 -16.26067
  conf.high
1 -4.163952
2  5.784052
> 
> 
> # `by` argument
> mod <- lm(mpg ~ hp * am * vs, data = mtcars)
> cmp <- comparisons(mod, variables = "hp", by = c("vs", "am"))
> summary(cmp)
  Term Contrast vs am   Effect Std. Error z value  Pr(>|z|)    2.5 %    97.5 %
1   hp mean(+1)  0  1 -0.03685    0.01240  -2.971 0.0029676 -0.06116 -0.012540
2   hp mean(+1)  1  1 -0.11115    0.04634  -2.399 0.0164473 -0.20197 -0.020336
3   hp mean(+1)  1  0 -0.09941    0.05345  -1.860 0.0628876 -0.20417  0.005344
4   hp mean(+1)  0  0 -0.04215    0.02477  -1.702 0.0887904 -0.09070  0.006394

Model type:  lm 
Prediction type:  response 
> 
> library(nnet)
> mod <- multinom(factor(gear) ~ mpg + am * vs, data = mtcars, trace = FALSE)
> by <- data.frame(
+     group = c("3", "4", "5"),
+     by = c("3,4", "3,4", "5"))
> comparisons(mod, type = "probs", by = by)
   type term    comparison   std.error   statistic     p.value    conf.low
1 probs  mpg  0.0004634916 0.005796055  0.07996674 0.936263711 -0.01089657
2 probs   am -0.2227925482 0.079557885 -2.80038299 0.005104201 -0.37872314
3 probs   vs  0.1021020743 0.073235805  1.39415514 0.163270760 -0.04143747
4 probs  mpg -0.0009269832 0.011592109 -0.07996674 0.936263711 -0.02364710
5 probs   am  0.4455850963 0.159115770  2.80038299 0.005104201  0.13372392
6 probs   vs -0.2042041486 0.146471610 -1.39415514 0.163270760 -0.49128323
    conf.high  by
1  0.01182355 3,4
2 -0.06686196 3,4
3  0.24564161 3,4
4  0.02179313   5
5  0.75744628   5
6  0.08287493   5
> 
> 
> 
> 
> cleanEx()

detaching 'package:nnet', 'package:magrittr'

> nameEx("datagrid")
> ### * datagrid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagrid
> ### Title: Generate a data grid of "typical," "counterfactual," or
> ###   user-specified values for use in the 'newdata' argument of the
> ###   'marginaleffects' or 'predictions' functions.
> ### Aliases: datagrid
> 
> ### ** Examples
> 
> # The output only has 2 rows, and all the variables except `hp` are at their
> # mean or mode.
> datagrid(newdata = mtcars, hp = c(100, 110))
       mpg    cyl     disp     drat      wt     qsec     vs      am   gear
1 20.09062 6.1875 230.7219 3.596563 3.21725 17.84875 0.4375 0.40625 3.6875
2 20.09062 6.1875 230.7219 3.596563 3.21725 17.84875 0.4375 0.40625 3.6875
    carb  hp
1 2.8125 100
2 2.8125 110
> 
> # We get the same result by feeding a model instead of a data.frame
> mod <- lm(mpg ~ hp, mtcars)
> datagrid(model = mod, hp = c(100, 110))
       mpg  hp
1 20.09062 100
2 20.09062 110
> 
> # Use in `marginaleffects` to compute "Typical Marginal Effects". When used
> # in `marginaleffects()` or `predictions()` we do not need to specify the
> #`model` or `newdata` arguments.
> marginaleffects(mod, newdata = datagrid(hp = c(100, 110)))
  rowid     type term        dydx std.error statistic      p.value    conf.low
1     1 response   hp -0.06822828 0.0101193 -6.742389 1.558038e-11 -0.08806175
2     2 response   hp -0.06822828 0.0101193 -6.742389 1.558038e-11 -0.08806175
    conf.high predicted predicted_hi predicted_lo      mpg  hp    eps
1 -0.04839481  23.27603     23.27410     23.27603 20.09062 100 0.0283
2 -0.04839481  22.59375     22.59182     22.59375 20.09062 110 0.0283
> 
> # datagrid accepts functions
> datagrid(hp = range, cyl = unique, newdata = mtcars)
       mpg     disp     drat      wt     qsec     vs      am   gear   carb  hp
1 20.09062 230.7219 3.596563 3.21725 17.84875 0.4375 0.40625 3.6875 2.8125  52
2 20.09062 230.7219 3.596563 3.21725 17.84875 0.4375 0.40625 3.6875 2.8125  52
3 20.09062 230.7219 3.596563 3.21725 17.84875 0.4375 0.40625 3.6875 2.8125  52
4 20.09062 230.7219 3.596563 3.21725 17.84875 0.4375 0.40625 3.6875 2.8125 335
5 20.09062 230.7219 3.596563 3.21725 17.84875 0.4375 0.40625 3.6875 2.8125 335
6 20.09062 230.7219 3.596563 3.21725 17.84875 0.4375 0.40625 3.6875 2.8125 335
  cyl
1   6
2   4
3   8
4   6
5   4
6   8
> comparisons(mod, newdata = datagrid(hp = fivenum))
  rowid     type term contrast  comparison std.error statistic      p.value
1     1 response   hp       +1 -0.06822828 0.0101193 -6.742389 1.558038e-11
2     2 response   hp       +1 -0.06822828 0.0101193 -6.742389 1.558038e-11
3     3 response   hp       +1 -0.06822828 0.0101193 -6.742389 1.558037e-11
4     4 response   hp       +1 -0.06822828 0.0101193 -6.742389 1.558037e-11
5     5 response   hp       +1 -0.06822828 0.0101193 -6.742389 1.558038e-11
     conf.low   conf.high predicted predicted_hi predicted_lo      mpg  hp
1 -0.08806175 -0.04839481 26.550990    26.516876    26.585104 20.09062  52
2 -0.08806175 -0.04839481 23.548946    23.514832    23.583060 20.09062  96
3 -0.08806175 -0.04839481 21.706782    21.672668    21.740896 20.09062 123
4 -0.08806175 -0.04839481 17.817770    17.783656    17.851885 20.09062 180
5 -0.08806175 -0.04839481  7.242387     7.208273     7.276502 20.09062 335
     eps
1 0.0283
2 0.0283
3 0.0283
4 0.0283
5 0.0283
> 
> # The full dataset is duplicated with each observation given counterfactual
> # values of 100 and 110 for the `hp` variable. The original `mtcars` includes
> # 32 rows, so the resulting dataset includes 64 rows.
> dg <- datagrid(newdata = mtcars, hp = c(100, 110), grid_type = "counterfactual")
> nrow(dg)
[1] 64
> 
> # We get the same result by feeding a model instead of a data.frame
> mod <- lm(mpg ~ hp, mtcars)
> dg <- datagrid(model = mod, hp = c(100, 110), grid_type = "counterfactual")
> nrow(dg)
[1] 64
> 
> 
> 
> cleanEx()
> nameEx("datagridcf")
> ### * datagridcf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagridcf
> ### Title: A "counterfactual" version of the 'datagrid()' function.
> ### Aliases: datagridcf
> 
> ### ** Examples
> 
> # Fit a model with 32 observations from the `mtcars` dataset.
> nrow(mtcars)
[1] 32
> 
> mod <- lm(mpg ~ hp + am, data = mtcars)
> 
> # We specify two values for the `am` variable and obtain a counterfactual
> # dataset with 64 observations (32 x 2).
> dat <- datagridcf(model = mod, am = 0:1)
> head(dat)
  rowidcf  mpg  hp am
1       1 21.0 110  0
2       2 21.0 110  0
3       3 22.8  93  0
4       4 21.4 110  0
5       5 18.7 175  0
6       6 18.1 105  0
> nrow(dat)
[1] 64
> 
> # We specify 2 values for the `am` variable and 3 values for the `hp` variable
> # and obtained a dataset with 192 observations (2x3x32), corresponding to the
> # full original data, with each possible combination of `hp` and `am`.
> dat <- datagridcf(am = 0:1, hp = c(100, 110, 120), newdata = mtcars)
> head(dat)
  rowidcf  mpg cyl disp drat    wt  qsec vs gear carb am  hp
1       1 21.0   6  160 3.90 2.620 16.46  0    4    4  0 100
2       2 21.0   6  160 3.90 2.875 17.02  0    4    4  0 100
3       3 22.8   4  108 3.85 2.320 18.61  1    4    1  0 100
4       4 21.4   6  258 3.08 3.215 19.44  1    3    1  0 100
5       5 18.7   8  360 3.15 3.440 17.02  0    3    2  0 100
6       6 18.1   6  225 2.76 3.460 20.22  1    3    1  0 100
> dim(dat)
[1] 192  12
> 
> 
> 
> 
> cleanEx()
> nameEx("deltamethod")
> ### * deltamethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deltamethod
> ### Title: Estimate and Standard Error of a Non-Linear Function of
> ###   Estimated Model Parameters
> ### Aliases: deltamethod
> 
> ### ** Examples
> 
> library(marginaleffects)
> mod <- lm(mpg ~ hp + wt + factor(cyl), data = mtcars)
> 
> # When `FUN` and `hypothesis` are `NULL`, `deltamethod()` returns a data.frame of parameters
> deltamethod(mod)
          term    estimate
1  (Intercept) 35.84599532
2           hp -0.02311981
3           wt -3.18140405
4 factor(cyl)6 -3.35902490
5 factor(cyl)8 -3.18588444
> 
> # Test of equality between coefficients
> deltamethod(mod, hypothesis = "hp = wt")
     term estimate std.error statistic      p.value conf.low conf.high
1 hp = wt 3.158284 0.7199081  4.387066 1.148899e-05  1.74729  4.569278
> 
> # Non-linear function
> deltamethod(mod, hypothesis = "exp(hp + wt) = 0.1")
                term    estimate  std.error statistic    p.value   conf.low
1 exp(hp + wt) = 0.1 -0.05942178 0.02919718 -2.035189 0.04183184 -0.1166472
     conf.high
1 -0.002196363
> 
> # Robust standard errors
> deltamethod(mod, hypothesis = "hp = wt", vcov = "HC3")
     term estimate std.error statistic      p.value conf.low conf.high
1 hp = wt 3.158284 0.8051929  3.922394 8.767334e-05 1.580135  4.736433
> 
> # b1, b2, ... shortcuts can be used to identify the position of the
> # parameters of interest in the output of FUN
> deltamethod(mod, hypothesis = "b2 = b3")
     term estimate std.error statistic      p.value conf.low conf.high
1 b2 = b3 3.158284 0.7199081  4.387066 1.148899e-05  1.74729  4.569278
> 
> # term names with special characters have to be enclosed in backticks
> deltamethod(mod, hypothesis = "`factor(cyl)6` = `factor(cyl)8`")
                             term   estimate std.error  statistic  p.value
1 `factor(cyl)6` = `factor(cyl)8` -0.1731405  1.653923 -0.1046847 0.916626
  conf.low conf.high
1 -3.41477   3.06849
> 
> mod2 <- lm(mpg ~ hp * drat, data = mtcars)
> deltamethod(mod2, hypothesis = "`hp:drat` = drat")
              term  estimate std.error statistic    p.value  conf.low conf.high
1 `hp:drat` = drat -6.079059  2.894846 -2.099959 0.03573245 -11.75285 -0.405264
> 
> # predictions(), comparisons(), and marginaleffects()
> mod <- glm(am ~ hp + mpg, data = mtcars, family = binomial)
> cmp <- comparisons(mod, newdata = "mean")
> deltamethod(cmp, hypothesis = "b1 = b2")
      type  term comparison std.error statistic   p.value   conf.low
1 response b1=b2 -0.2878473 0.1202154  -2.39443 0.0166462 -0.5234651
    conf.high
1 -0.05222954
> 
> mfx <- marginaleffects(mod, newdata = "mean")
> deltamethod(cmp, hypothesis = "b2 = 0.2")
      type   term comparison std.error statistic   p.value   conf.low conf.high
1 response b2=0.2  0.1014359  0.126358 0.8027657 0.4221102 -0.1462213 0.3490931
> 
> pre <- predictions(mod, newdata = datagrid(hp = 110, mpg = c(30, 35)))
> deltamethod(pre, hypothesis = "b1 = b2")
      type  term    predicted   std.error  statistic   p.value      conf.low
1 response b1=b2 -3.57111e-05 0.000170871 -0.2089945 0.8344526 -0.0003706122
   conf.high
1 0.00029919
> 
> # The `FUN` argument can be used to compute standard errors for fitted values
> mod <- glm(am ~ hp + mpg, data = mtcars, family = binomial)
> 
> f <- function(x) predict(x, type = "link", newdata = mtcars)
> p <- deltamethod(mod, FUN = f)
> head(p)
  term   estimate std.error  statistic    p.value  conf.low  conf.high
1   b1 -1.0983601 0.7160423 -1.5339319 0.12504640 -2.501777  0.3050570
2   b2 -1.0983601 0.7160423 -1.5339319 0.12504640 -2.501777  0.3050570
3   b3  0.2331884 0.7808207  0.2986452 0.76521076 -1.297192  1.7635688
4   b4 -0.5945143 0.6471012 -0.9187346 0.35823441 -1.862809  0.6737808
5   b5 -0.4175761 0.6474633 -0.6449417 0.51896494 -1.686581  0.8514287
6   b6 -5.0264654 2.1949096 -2.2900558 0.02201808 -9.328409 -0.7245217
> 
> f <- function(x) predict(x, type = "response", newdata = mtcars)
> p <- deltamethod(mod, FUN = f)
> head(p)
  term    estimate  std.error statistic     p.value    conf.low  conf.high
1   b1 0.250047286 0.13293667 1.8809504 0.059978669 -0.01050381 0.51059838
2   b2 0.250047286 0.13293667 1.8809504 0.059978669 -0.01050381 0.51059838
3   b3 0.558034354 0.19239540 2.9004558 0.003726204  0.18094630 0.93512241
4   b4 0.355599745 0.14785649 2.4050330 0.016171004  0.06580635 0.64539314
5   b5 0.397096909 0.15541311 2.5551057 0.010615556  0.09249282 0.70170100
6   b6 0.006519185 0.01407361 0.4632204 0.643206374 -0.02106459 0.03410296
> 
> 
> 
> 
> cleanEx()
> nameEx("marginaleffects")
> ### * marginaleffects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: marginaleffects
> ### Title: Marginal Effects (Slopes)
> ### Aliases: marginaleffects
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> mod <- glm(am ~ hp * wt, data = mtcars, family = binomial)
> mfx <- marginaleffects(mod)
> head(mfx)
  rowid     type term         dydx    std.error statistic   p.value
1     1 response   hp 0.0069832251 0.0058793768 1.1877492 0.2349322
2     2 response   hp 0.0164041227 0.0133880593 1.2252801 0.2204697
3     3 response   hp 0.0028284517 0.0037506566 0.7541217 0.4507761
4     4 response   hp 0.0019348755 0.0024508960 0.7894564 0.4298453
5     5 response   hp 0.0029928602 0.0033775105 0.8861142 0.3755560
6     6 response   hp 0.0001476461 0.0003452784 0.4276146 0.6689317
       conf.low    conf.high   predicted predicted_hi predicted_lo am  hp    wt
1 -0.0045401417 0.0185065919 0.898311019   0.89850864  0.898311019  1 110 2.620
2 -0.0098359913 0.0426442368 0.467644655   0.46810889  0.467644655  1 110 2.875
3 -0.0045227002 0.0101796036 0.967103810   0.96718386  0.967103810  1  93 2.320
4 -0.0028687924 0.0067385435 0.038895584   0.03895034  0.038895584  0 110 3.215
5 -0.0036269388 0.0096126591 0.076483825   0.07656852  0.076483825  0 175 3.440
6 -0.0005290872 0.0008243794 0.003566962   0.00357114  0.003566962  0 105 3.460
     eps
1 0.0283
2 0.0283
3 0.0283
4 0.0283
5 0.0283
6 0.0283
> 
> # Average Marginal Effect (AME)
> summary(mfx)
  Term    Effect Std. Error z value   Pr(>|z|)     2.5 %    97.5 %
1   hp  0.002653   0.001939   1.368    0.17121 -0.001147  0.006452
2   wt -0.435783   0.102063  -4.270 1.9568e-05 -0.635822 -0.235744

Model type:  glm 
Prediction type:  response 
> tidy(mfx)
      type term     estimate   std.error statistic      p.value     conf.low
1 response   hp  0.002652526 0.001938531  1.368318 1.712127e-01 -0.001146925
2 response   wt -0.435783199 0.102062710 -4.269759 1.956841e-05 -0.635822435
     conf.high
1  0.006451977
2 -0.235743963
> plot(mfx)
> 
> 
> # Marginal Effect at the Mean (MEM)
> marginaleffects(mod, newdata = datagrid())
  rowid     type term         dydx   std.error statistic   p.value     conf.low
1     1 response   hp  0.008526944 0.007849817  1.086260 0.2773639 -0.006858415
2     1 response   wt -1.744526869 1.586306472 -1.099741 0.2714448 -4.853630423
  conf.high predicted predicted_hi predicted_lo      am       hp      wt
1 0.0239123  0.208598    0.2088393     0.208598 0.40625 146.6875 3.21725
2 1.3645767  0.208598    0.2079157     0.208598 0.40625 146.6875 3.21725
        eps
1 0.0283000
2 0.0003911
> 
> # Marginal Effect at User-Specified Values
> # Variables not explicitly included in `datagrid()` are held at their means
> marginaleffects(mod,
+                 newdata = datagrid(hp = c(100, 110)))
  rowid     type term         dydx   std.error  statistic   p.value
1     1 response   hp  0.001166673 0.001754130  0.6651008 0.5059860
2     2 response   hp  0.001895403 0.002416124  0.7844807 0.4327581
3     1 response   wt -0.194677637 0.307227708 -0.6336591 0.5263033
4     2 response   wt -0.331535828 0.436074375 -0.7602736 0.4470911
      conf.low   conf.high  predicted predicted_hi predicted_lo      am      wt
1 -0.002271359 0.004604705 0.02311544   0.02314846   0.02311544 0.40625 3.21725
2 -0.002840114 0.006630920 0.03814134   0.03819498   0.03814134 0.40625 3.21725
3 -0.796832880 0.407477605 0.02311544   0.02303930   0.02311544 0.40625 3.21725
4 -1.186225898 0.523154241 0.03814134   0.03801168   0.03814134 0.40625 3.21725
   hp       eps
1 100 0.0283000
2 110 0.0283000
3 100 0.0003911
4 110 0.0003911
> 
> # Group-Average Marginal Effects (G-AME)
> # Calculate marginal effects for each observation, and then take the average
> # marginal effect within each subset of observations with different observed
> # values for the `cyl` variable:
> mod2 <- lm(mpg ~ hp * cyl, data = mtcars)
> mfx2 <- marginaleffects(mod2, variables = "hp", by = "cyl")
> summary(mfx2)
  Term    Contrast cyl   Effect Std. Error z value  Pr(>|z|)    2.5 %   97.5 %
1   hp mean(dY/dX)   6 -0.05226    0.02041 -2.5608 0.0104442 -0.09225 -0.01226
2   hp mean(dY/dX)   4 -0.09173    0.03533 -2.5964 0.0094216 -0.16098 -0.02248
3   hp mean(dY/dX)   8 -0.01278    0.01434 -0.8912 0.3727993 -0.04089  0.01533

Model type:  lm 
Prediction type:  response 
> 
> # Marginal Effects at User-Specified Values (counterfactual)
> # Variables not explicitly included in `datagrid()` are held at their
> # original values, and the whole dataset is duplicated once for each
> # combination of the values in `datagrid()`
> mfx <- marginaleffects(mod,
+                        newdata = datagrid(hp = c(100, 110),
+                                           grid_type = "counterfactual"))
> head(mfx)
  rowid     type term         dydx    std.error statistic   p.value
1     1 response   hp 0.0120345428 0.0099871554 1.2050021 0.2282025
2     2 response   hp 0.0141605125 0.0108083859 1.3101413 0.1901480
3     3 response   hp 0.0015641805 0.0022024746 0.7101923 0.4775849
4     4 response   hp 0.0011906427 0.0017804554 0.6687293 0.5036682
5     5 response   hp 0.0001454839 0.0003410785 0.4265408 0.6697138
6     6 response   hp 0.0001201299 0.0002911014 0.4126737 0.6798457
       conf.low    conf.high rowidcf   predicted predicted_hi predicted_lo am
1 -0.0075399221 0.0316090077       1 0.804313722  0.804654300  0.804313722  1
2 -0.0070235346 0.0353445595       2 0.312493620  0.312894363  0.312493620  1
3 -0.0027525905 0.0058809514       3 0.982084695  0.982128961  0.982084695  1
4 -0.0022989857 0.0046802710       4 0.023558258  0.023591954  0.023558258  0
5 -0.0005230176 0.0008139854       5 0.003445112  0.003449229  0.003445112  0
6 -0.0004504183 0.0006906781       6 0.002900259  0.002903658  0.002900259  0
     wt  hp    eps
1 2.620 100 0.0283
2 2.875 100 0.0283
3 2.320 100 0.0283
4 3.215 100 0.0283
5 3.440 100 0.0283
6 3.460 100 0.0283
> 
> # Heteroskedasticity robust standard errors
> marginaleffects(mod, vcov = sandwich::vcovHC(mod))
   rowid     type term          dydx    std.error   statistic     p.value
1      1 response   hp  6.983225e-03 9.187144e-03  0.76010842 0.447189783
2      2 response   hp  1.640412e-02 1.340247e-02  1.22396223 0.220966478
3      3 response   hp  2.828452e-03 4.912949e-03  0.57571361 0.564808773
4      4 response   hp  1.934876e-03 1.843501e-03  1.04956555 0.293917903
5      5 response   hp  2.992860e-03 2.782662e-03  1.07553837 0.282133765
6      6 response   hp  1.476461e-04 2.545412e-04  0.58004785 0.561882352
7      7 response   hp  5.740668e-03 8.192346e-03  0.70073546 0.483468120
8      8 response   hp  2.111702e-04 3.886726e-04  0.54331123 0.586915530
9      9 response   hp  1.646976e-03 1.727929e-03  0.95314999 0.340514083
10    10 response   hp  3.809918e-04 5.150443e-04  0.73972622 0.459466136
11    11 response   hp  3.809918e-04 5.150443e-04  0.73972622 0.459466136
12    12 response   hp  8.760463e-07 6.574577e-06  0.13324755 0.893997608
13    13 response   hp  9.575809e-05 3.219972e-04  0.29738799 0.766170311
14    14 response   hp  4.915362e-05 1.903900e-04  0.25817324 0.796273210
15    15 response   hp -5.787254e-13 8.594637e-12 -0.06733565 0.946314499
16    16 response   hp -4.902183e-14 8.735888e-13 -0.05611545 0.955249833
17    17 response   hp -7.463248e-14 1.373213e-12 -0.05434881 0.956657263
18    18 response   hp  1.107615e-02 1.420807e-02  0.77956728 0.435645620
19    19 response   hp  1.403006e-03 4.013438e-03  0.34957716 0.726656055
20    20 response   hp  1.346032e-03 2.931206e-03  0.45920765 0.646085055
21    21 response   hp  5.795830e-03 7.807260e-03  0.74236417 0.457866722
22    22 response   hp  4.644015e-04 6.992967e-04  0.66409788 0.506627668
23    23 response   hp  1.215863e-03 1.227051e-03  0.99088197 0.321743216
24    24 response   hp  1.153492e-04 6.936387e-04  0.16629576 0.867924202
25    25 response   hp  1.800542e-05 8.054465e-05  0.22354577 0.823110765
26    26 response   hp  2.339616e-03 4.551005e-03  0.51408786 0.607190567
27    27 response   hp  8.695693e-04 1.975180e-03  0.44024813 0.659757402
28    28 response   hp  4.267318e-07 2.730750e-06  0.15626907 0.875820938
29    29 response   hp  2.271717e-04 1.130909e-03  0.20087529 0.840796086
30    30 response   hp  3.179746e-04 1.377287e-03  0.23087023 0.817415616
31    31 response   hp  4.210965e-03 7.657335e-03  0.54992568 0.582370348
32    32 response   hp  1.568271e-02 7.580280e-03  2.06888256 0.038557109
33     1 response   wt -8.280303e-01 1.279527e+00 -0.64713786 0.517542725
34     2 response   wt -2.253205e+00 1.362419e+00 -1.65382633 0.098162805
35     3 response   wt -2.658461e-01 5.257923e-01 -0.50561042 0.613130163
36     4 response   wt -3.378277e-01 3.501323e-01 -0.96485732 0.334616282
37     5 response   wt -8.290222e-01 6.811943e-01 -1.21701273 0.223599374
38     6 response   wt -3.137785e-02 5.512417e-02 -0.56922131 0.569205958
39     7 response   wt -2.276351e+00 2.471021e+00 -0.92121870 0.356936256
40     8 response   wt -2.816330e-02 5.696766e-02 -0.49437345 0.621042458
41     9 response   wt -2.543997e-01 2.857380e-01 -0.89032510 0.373291345
42    10 response   wt -8.609526e-02 1.157515e-01 -0.74379421 0.457000984
43    11 response   wt -8.609526e-02 1.157515e-01 -0.74379421 0.457000984
44    12 response   wt -6.494143e-04 3.310778e-03 -0.19615159 0.844491515
45    13 response   wt -3.775892e-02 9.172958e-02 -0.41163299 0.680608450
46    14 response   wt -2.081495e-02 5.862543e-02 -0.35504993 0.722552188
47    15 response   wt -2.272851e-10 3.859969e-09 -0.05888264 0.953045588
48    16 response   wt -1.629596e-11 3.217589e-10 -0.05064649 0.959607218
49    17 response   wt -2.826816e-11 5.795693e-10 -0.04877442 0.961099064
50    18 response   wt -8.521936e-01 8.229549e-01 -1.03552890 0.300421976
51    19 response   wt -7.886841e-02 1.842446e-01 -0.42806372 0.668604733
52    20 response   wt -8.870757e-02 1.769120e-01 -0.50142208 0.616074101
53    21 response   wt -5.959105e-01 9.379795e-01 -0.63531297 0.525224319
54    22 response   wt -1.272450e-01 1.577696e-01 -0.80652389 0.419940837
55    23 response   wt -3.054369e-01 2.813059e-01 -1.08578199 0.277575456
56    24 response   wt -6.569718e-02 2.831304e-01 -0.23203857 0.816508057
57    25 response   wt -8.288936e-03 2.714899e-02 -0.30531290 0.760127851
58    26 response   wt -1.612155e-01 2.841263e-01 -0.56740790 0.570437083
59    27 response   wt -7.464417e-02 1.884619e-01 -0.39607031 0.692053163
60    28 response   wt -3.204617e-05 2.159959e-04 -0.14836470 0.882054955
61    29 response   wt -6.580439e-02 3.321209e-01 -0.19813386 0.842940336
62    30 response   wt -5.339272e-02 2.402385e-01 -0.22224887 0.824120154
63    31 response   wt -2.107162e+00 4.582922e+00 -0.45978566 0.645670075
64    32 response   wt -2.024827e+00 7.486883e-01 -2.70449961 0.006840735
        conf.low     conf.high    predicted predicted_hi predicted_lo am  hp
1  -1.102325e-02  2.498970e-02 8.983110e-01 8.985086e-01 8.983110e-01  1 110
2  -9.864245e-03  4.267249e-02 4.676447e-01 4.681089e-01 4.676447e-01  1 110
3  -6.800752e-03  1.245766e-02 9.671038e-01 9.671839e-01 9.671038e-01  1  93
4  -1.678321e-03  5.548072e-03 3.889558e-02 3.895034e-02 3.889558e-02  0 110
5  -2.461058e-03  8.446778e-03 7.648382e-02 7.656852e-02 7.648382e-02  0 175
6  -3.512456e-04  6.465378e-04 3.566962e-03 3.571140e-03 3.566962e-03  0 105
7  -1.031604e-02  2.179737e-02 1.923979e-01 1.925604e-01 1.923979e-01  0 245
8  -5.506142e-04  9.729546e-04 4.015235e-03 4.021211e-03 4.015235e-03  0  62
9  -1.739703e-03  5.033655e-03 3.120992e-02 3.125653e-02 3.120992e-02  0  95
10 -6.284766e-04  1.390460e-03 9.073330e-03 9.084112e-03 9.073330e-03  0 123
11 -6.284766e-04  1.390460e-03 9.073330e-03 9.084112e-03 9.073330e-03  0 123
12 -1.200989e-05  1.376198e-05 5.439236e-05 5.441715e-05 5.439236e-05  0 180
13 -5.353448e-04  7.268609e-04 3.172383e-03 3.175093e-03 3.172383e-03  0 180
14 -3.240040e-04  4.223113e-04 1.746319e-03 1.747710e-03 1.746319e-03  0 180
15 -1.742390e-11  1.626645e-11 1.751508e-11 1.749870e-11 1.751508e-11  0 205
16 -1.761224e-12  1.663181e-12 1.216933e-12 1.215546e-12 1.216933e-12  0 215
17 -2.766080e-12  2.616815e-12 2.017342e-12 2.015230e-12 2.017342e-12  0 230
18 -1.677116e-02  3.892346e-02 8.634101e-01 8.637236e-01 8.634101e-01  1  66
19 -6.463188e-03  9.269201e-03 9.879847e-01 9.880244e-01 9.879847e-01  1  52
20 -4.399026e-03  7.091091e-03 9.875007e-01 9.875388e-01 9.875007e-01  1  65
21 -9.506118e-03  2.109778e-02 9.243530e-01 9.245170e-01 9.243530e-01  0  97
22 -9.061949e-04  1.834998e-03 1.204113e-02 1.205428e-02 1.204113e-02  0 150
23 -1.189113e-03  3.620838e-03 2.941871e-02 2.945312e-02 2.941871e-02  0 150
24 -1.244158e-03  1.474856e-03 4.509574e-03 4.512838e-03 4.509574e-03  0 245
25 -1.398592e-04  1.758700e-04 7.069764e-04 7.074860e-04 7.069764e-04  0 175
26 -6.580190e-03  1.125942e-02 9.771760e-01 9.772422e-01 9.771760e-01  1  66
27 -3.001712e-03  4.740851e-03 9.908948e-01 9.909194e-01 9.908948e-01  1  91
28 -4.925440e-06  5.778904e-06 9.999965e-01 9.999965e-01 9.999965e-01  1 113
29 -1.989369e-03  2.443712e-03 9.957403e-01 9.957467e-01 9.957403e-01  1 264
30 -2.381458e-03  3.017407e-03 9.954493e-01 9.954583e-01 9.954493e-01  1 175
31 -1.079714e-02  1.921907e-02 8.687038e-01 8.688229e-01 8.687038e-01  1 335
32  8.256332e-04  3.053978e-02 6.593657e-01 6.598095e-01 6.593657e-01  1 109
33 -3.335857e+00  1.679796e+00 8.983110e-01 8.979872e-01 8.983110e-01  1 110
34 -4.923497e+00  4.170878e-01 4.676447e-01 4.667634e-01 4.676447e-01  1 110
35 -1.296380e+00  7.646879e-01 9.671038e-01 9.669998e-01 9.671038e-01  1  93
36 -1.024074e+00  3.484190e-01 3.889558e-02 3.876346e-02 3.889558e-02  0 110
37 -2.164139e+00  5.060942e-01 7.648382e-02 7.615959e-02 7.648382e-02  0 175
38 -1.394192e-01  7.666354e-02 3.566962e-03 3.554690e-03 3.566962e-03  0 105
39 -7.119463e+00  2.566761e+00 1.923979e-01 1.915076e-01 1.923979e-01  0 245
40 -1.398179e-01  8.349126e-02 4.015235e-03 4.004220e-03 4.015235e-03  0  62
41 -8.144358e-01  3.056364e-01 3.120992e-02 3.111043e-02 3.120992e-02  0  95
42 -3.129639e-01  1.407734e-01 9.073330e-03 9.039658e-03 9.073330e-03  0 123
43 -3.129639e-01  1.407734e-01 9.073330e-03 9.039658e-03 9.073330e-03  0 123
44 -7.138419e-03  5.839590e-03 5.439236e-05 5.413837e-05 5.439236e-05  0 180
45 -2.175456e-01  1.420277e-01 3.172383e-03 3.157615e-03 3.172383e-03  0 180
46 -1.357187e-01  9.408877e-02 1.746319e-03 1.738178e-03 1.746319e-03  0 180
47 -7.792685e-09  7.338115e-09 1.751508e-11 1.742619e-11 1.751508e-11  0 205
48 -6.469318e-10  6.143399e-10 1.216933e-12 1.210560e-12 1.216933e-12  0 215
49 -1.164203e-09  1.107667e-09 2.017342e-12 2.006286e-12 2.017342e-12  0 230
50 -2.465156e+00  7.607684e-01 8.634101e-01 8.630768e-01 8.634101e-01  1  66
51 -4.399811e-01  2.822443e-01 9.879847e-01 9.879538e-01 9.879847e-01  1  52
52 -4.354486e-01  2.580335e-01 9.875007e-01 9.874660e-01 9.875007e-01  1  65
53 -2.434316e+00  1.242495e+00 9.243530e-01 9.241200e-01 9.243530e-01  0  97
54 -4.364678e-01  1.819778e-01 1.204113e-02 1.199137e-02 1.204113e-02  0 150
55 -8.567864e-01  2.459126e-01 2.941871e-02 2.929926e-02 2.941871e-02  0 150
56 -6.206226e-01  4.892282e-01 4.509574e-03 4.483880e-03 4.509574e-03  0 245
57 -6.149997e-02  4.492210e-02 7.069764e-04 7.037346e-04 7.069764e-04  0 175
58 -7.180927e-01  3.956618e-01 9.771760e-01 9.771130e-01 9.771760e-01  1  66
59 -4.440227e-01  2.947344e-01 9.908948e-01 9.908656e-01 9.908948e-01  1  91
60 -4.553905e-04  3.912981e-04 9.999965e-01 9.999965e-01 9.999965e-01  1 113
61 -7.167493e-01  5.851405e-01 9.957403e-01 9.957145e-01 9.957403e-01  1 264
62 -5.242514e-01  4.174660e-01 9.954493e-01 9.954285e-01 9.954493e-01  1 175
63 -1.108952e+01  6.875201e+00 8.687038e-01 8.678796e-01 8.687038e-01  1 335
64 -3.492230e+00 -5.574251e-01 6.593657e-01 6.585738e-01 6.593657e-01  1 109
      wt       eps
1  2.620 0.0283000
2  2.875 0.0283000
3  2.320 0.0283000
4  3.215 0.0283000
5  3.440 0.0283000
6  3.460 0.0283000
7  3.570 0.0283000
8  3.190 0.0283000
9  3.150 0.0283000
10 3.440 0.0283000
11 3.440 0.0283000
12 4.070 0.0283000
13 3.730 0.0283000
14 3.780 0.0283000
15 5.250 0.0283000
16 5.424 0.0283000
17 5.345 0.0283000
18 2.200 0.0283000
19 1.615 0.0283000
20 1.835 0.0283000
21 2.465 0.0283000
22 3.520 0.0283000
23 3.435 0.0283000
24 3.840 0.0283000
25 3.845 0.0283000
26 1.935 0.0283000
27 2.140 0.0283000
28 1.513 0.0283000
29 3.170 0.0283000
30 2.770 0.0283000
31 3.570 0.0283000
32 2.780 0.0283000
33 2.620 0.0003911
34 2.875 0.0003911
35 2.320 0.0003911
36 3.215 0.0003911
37 3.440 0.0003911
38 3.460 0.0003911
39 3.570 0.0003911
40 3.190 0.0003911
41 3.150 0.0003911
42 3.440 0.0003911
43 3.440 0.0003911
44 4.070 0.0003911
45 3.730 0.0003911
46 3.780 0.0003911
47 5.250 0.0003911
48 5.424 0.0003911
49 5.345 0.0003911
50 2.200 0.0003911
51 1.615 0.0003911
52 1.835 0.0003911
53 2.465 0.0003911
54 3.520 0.0003911
55 3.435 0.0003911
56 3.840 0.0003911
57 3.845 0.0003911
58 1.935 0.0003911
59 2.140 0.0003911
60 1.513 0.0003911
61 3.170 0.0003911
62 2.770 0.0003911
63 3.570 0.0003911
64 2.780 0.0003911
> 
> # hypothesis test: is the `hp` marginal effect at the mean equal to the `drat` marginal effect
> mod <- lm(mpg ~ wt + drat, data = mtcars)
> 
> marginaleffects(
+     mod,
+     newdata = "mean",
+     hypothesis = "wt = drat")
      type    term      dydx std.error statistic      p.value conf.low
1 response wt=drat -6.225381  1.051769 -5.918963 3.239775e-09 -8.28681
  conf.high
1 -4.163952
> 
> # same hypothesis test using row indices
> marginaleffects(
+     mod,
+     newdata = "mean",
+     hypothesis = "b1 - b2 = 0")
      type    term      dydx std.error statistic      p.value conf.low
1 response b1-b2=0 -6.225381  1.051769 -5.918963 3.239775e-09 -8.28681
  conf.high
1 -4.163952
> 
> # same hypothesis test using numeric vector of weights
> marginaleffects(
+     mod,
+     newdata = "mean",
+     hypothesis = c(1, -1))
      type   term      dydx std.error statistic      p.value conf.low conf.high
1 response custom -6.225381  1.051769 -5.918963 3.239775e-09 -8.28681 -4.163952
> 
> # two custom contrasts using a matrix of weights
> lc <- matrix(c(
+     1, -1,
+     2, 3),
+     ncol = 2)
> colnames(lc) <- c("Contrast A", "Contrast B")
> marginaleffects(
+     mod,
+     newdata = "mean",
+     hypothesis = lc)
      type       term      dydx std.error  statistic      p.value  conf.low
1 response Contrast A -6.225381  1.051769 -5.9189632 3.239775e-09  -8.28681
2 response Contrast B -5.238308  5.623757 -0.9314607 3.516153e-01 -16.26067
  conf.high
1 -4.163952
2  5.784052
> 
> 
> 
> 
> cleanEx()
> nameEx("marginalmeans")
> ### * marginalmeans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: marginalmeans
> ### Title: Marginal Means
> ### Aliases: marginalmeans
> 
> ### ** Examples
> 
> library(marginaleffects)
> 
> # simple marginal means for each level of `cyl`
> dat <- mtcars
> dat$carb <- factor(dat$carb)
> dat$cyl <- factor(dat$cyl)
> dat$am <- as.logical(dat$am)
> mod <- lm(mpg ~ carb + cyl + am, dat)
> 
> marginalmeans(
+   mod,
+   variables = "cyl")
  term value marginalmean std.error conf.low conf.high      p.value statistic
1  cyl     4     23.11334  1.658224 19.86328  26.36340 3.690579e-44  13.93861
2  cyl     6     20.38477  1.337106 17.76409  23.00545 1.765453e-52  15.24544
3  cyl     8     16.21082  1.072551 14.10866  18.31299 1.304150e-51  15.11427
> 
> # collapse levels of cyl by averaging
> by <- data.frame(
+   cyl = c(4, 6, 8),
+   by = c("4 & 6", "4 & 6", "8"))
> marginalmeans(mod,
+   variables = "cyl",
+   by = by)
     by marginalmean std.error conf.low conf.high      p.value statistic
1 4 & 6     21.74905  1.132084 19.53021  23.96790 2.964293e-82  19.21152
2     8     16.21082  1.072551 14.10866  18.31299 1.304150e-51  15.11427
> 
> # pairwise differences between collapsed levels
> marginalmeans(mod,
+   variables = "cyl",
+   by = by,
+   hypothesis = "pairwise")
       term marginalmean std.error conf.low conf.high      p.value statistic
1 4 & 6 - 8     5.538228  1.513052   2.5727  8.503755 0.0002519178  3.660302
> 
> # cross
> marginalmeans(mod,
+   variables = c("cyl", "carb"),
+   cross = TRUE)
   cyl carb marginalmean std.error  conf.low conf.high       p.value statistic
1    6    4     19.14907  1.338478 16.525705  21.77244  1.990073e-46 14.306600
2    6    1     23.08862  1.765271 19.628756  26.54849  4.320526e-39 13.079362
3    6    2     22.85979  1.867465 19.199624  26.51995  1.875206e-34 12.241080
4    6    3     22.61071  2.365152 17.975102  27.24633  1.178225e-21  9.559942
5    6    6     17.56323  3.003716 11.676053  23.45040  5.000145e-09  5.847167
6    6    8     17.03717  3.481207 10.214129  23.86021  9.878645e-07  4.894041
7    4    4     21.87765  1.901048 18.151659  25.60363  1.199563e-30 11.508200
8    4    1     25.81720  1.263909 23.339980  28.29441  9.729029e-93 20.426468
9    4    2     25.58836  1.166714 23.301643  27.87508 1.286605e-106 21.931995
10   4    3     25.33929  2.365152 20.703673  29.97490  8.787848e-27 10.713598
11   4    6     20.29180  3.766424 12.909744  27.67385  7.142425e-08  5.387551
12   4    8     19.76574  3.814283 12.289884  27.24160  2.194796e-07  5.182034
13   8    4     14.97513  1.195291 12.632406  17.31786  5.217537e-36 12.528445
14   8    1     18.91468  1.942030 15.108373  22.72099  2.042705e-22  9.739643
15   8    2     18.68585  1.570513 15.607698  21.76399  1.213213e-32 11.897929
16   8    3     18.43677  1.830964 14.848149  22.02540  7.540931e-24 10.069436
17   8    6     13.38929  3.356162  6.811330  19.96724  6.622284e-05  3.989464
18   8    8     12.86323  3.003716  6.976053  18.75040  1.848561e-05  4.282439
> 
> # collapsed cross
> by <- expand.grid(
+   cyl = unique(mtcars$cyl),
+   carb = unique(mtcars$carb))
> by$by <- ifelse(
+   by$cyl == 4,
+   paste("Control:", by$carb),
+   paste("Treatment:", by$carb))
> 
> 
> # Convert numeric variables to categorical before fitting the model
> dat <- mtcars
> dat$am <- as.logical(dat$am)
> dat$carb <- as.factor(dat$carb)
> mod <- lm(mpg ~ hp + am + carb, data = dat)
> 
> # Compute and summarize marginal means
> mm <- marginalmeans(mod)
> summary(mm)
  Term Value  Mean Std. Error z value   Pr(>|z|) 2.5 % 97.5 %
1   am FALSE 17.87      1.244  14.366 < 2.22e-16 15.43  20.31
2   am  TRUE 23.11      0.974  23.724 < 2.22e-16 21.20  25.02
3 carb     1 21.99      1.345  16.350 < 2.22e-16 19.35  24.63
4 carb     2 21.48      1.025  20.955 < 2.22e-16 19.47  23.49
5 carb     3 20.55      1.780  11.549 < 2.22e-16 17.06  24.04
6 carb     4 18.82      1.042  18.065 < 2.22e-16 16.77  20.86
7 carb     6 18.47      3.019   6.118 9.4743e-10 12.55  24.39
8 carb     8 21.62      4.055   5.332 9.6936e-08 13.68  29.57

Model type:  lm 
Prediction type:  response 
Results averaged over levels of: am, carb 
> 
> # Contrast between marginal means (carb2 - carb1), or "is the 1st marginal means equal to the 2nd?"
> # see the vignette on "Hypothesis Tests and Custom Contrasts" on the `marginaleffects` website.
> lc <- c(-1, 1, 0, 0, 0, 0)
> marginalmeans(mod, variables = "carb", hypothesis = "b2 = b1")
   term marginalmean std.error  conf.low conf.high   p.value  statistic
1 b2=b1   -0.5142619  1.477885 -3.410863   2.38234 0.7278616 -0.3479715
> 
> marginalmeans(mod, variables = "carb", hypothesis = lc)
    term marginalmean std.error  conf.low conf.high   p.value  statistic
1 custom   -0.5142619  1.477885 -3.410863   2.38234 0.7278616 -0.3479715
> 
> # Multiple custom contrasts
> lc <- matrix(c(
+     -2, 1, 1, 0, -1, 1,
+     -1, 1, 0, 0, 0, 0
+     ),
+   ncol = 2,
+   dimnames = list(NULL, c("A", "B")))
> marginalmeans(mod, variables = "carb", hypothesis = lc)
  term marginalmean std.error   conf.low conf.high   p.value  statistic
1    A    1.1989451  6.149643 -10.854133  13.25202 0.8454229  0.1949618
2    B   -0.5142619  1.477885  -3.410863   2.38234 0.7278616 -0.3479715
> 
> 
> 
> 
> cleanEx()
> nameEx("meffects")
> ### * meffects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meffects
> ### Title: 'meffects()' is a shortcut to 'marginaleffects()'
> ### Aliases: meffects
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> mod <- glm(am ~ hp * wt, data = mtcars, family = binomial)
> mfx <- marginaleffects(mod)
> head(mfx)
  rowid     type term         dydx    std.error statistic   p.value
1     1 response   hp 0.0069832251 0.0058793768 1.1877492 0.2349322
2     2 response   hp 0.0164041227 0.0133880593 1.2252801 0.2204697
3     3 response   hp 0.0028284517 0.0037506566 0.7541217 0.4507761
4     4 response   hp 0.0019348755 0.0024508960 0.7894564 0.4298453
5     5 response   hp 0.0029928602 0.0033775105 0.8861142 0.3755560
6     6 response   hp 0.0001476461 0.0003452784 0.4276146 0.6689317
       conf.low    conf.high   predicted predicted_hi predicted_lo am  hp    wt
1 -0.0045401417 0.0185065919 0.898311019   0.89850864  0.898311019  1 110 2.620
2 -0.0098359913 0.0426442368 0.467644655   0.46810889  0.467644655  1 110 2.875
3 -0.0045227002 0.0101796036 0.967103810   0.96718386  0.967103810  1  93 2.320
4 -0.0028687924 0.0067385435 0.038895584   0.03895034  0.038895584  0 110 3.215
5 -0.0036269388 0.0096126591 0.076483825   0.07656852  0.076483825  0 175 3.440
6 -0.0005290872 0.0008243794 0.003566962   0.00357114  0.003566962  0 105 3.460
     eps
1 0.0283
2 0.0283
3 0.0283
4 0.0283
5 0.0283
6 0.0283
> 
> # Average Marginal Effect (AME)
> summary(mfx)
  Term    Effect Std. Error z value   Pr(>|z|)     2.5 %    97.5 %
1   hp  0.002653   0.001939   1.368    0.17121 -0.001147  0.006452
2   wt -0.435783   0.102063  -4.270 1.9568e-05 -0.635822 -0.235744

Model type:  glm 
Prediction type:  response 
> tidy(mfx)
      type term     estimate   std.error statistic      p.value     conf.low
1 response   hp  0.002652526 0.001938531  1.368318 1.712127e-01 -0.001146925
2 response   wt -0.435783199 0.102062710 -4.269759 1.956841e-05 -0.635822435
     conf.high
1  0.006451977
2 -0.235743963
> plot(mfx)
> 
> 
> # Marginal Effect at the Mean (MEM)
> marginaleffects(mod, newdata = datagrid())
  rowid     type term         dydx   std.error statistic   p.value     conf.low
1     1 response   hp  0.008526944 0.007849817  1.086260 0.2773639 -0.006858415
2     1 response   wt -1.744526869 1.586306472 -1.099741 0.2714448 -4.853630423
  conf.high predicted predicted_hi predicted_lo      am       hp      wt
1 0.0239123  0.208598    0.2088393     0.208598 0.40625 146.6875 3.21725
2 1.3645767  0.208598    0.2079157     0.208598 0.40625 146.6875 3.21725
        eps
1 0.0283000
2 0.0003911
> 
> # Marginal Effect at User-Specified Values
> # Variables not explicitly included in `datagrid()` are held at their means
> marginaleffects(mod,
+                 newdata = datagrid(hp = c(100, 110)))
  rowid     type term         dydx   std.error  statistic   p.value
1     1 response   hp  0.001166673 0.001754130  0.6651008 0.5059860
2     2 response   hp  0.001895403 0.002416124  0.7844807 0.4327581
3     1 response   wt -0.194677637 0.307227708 -0.6336591 0.5263033
4     2 response   wt -0.331535828 0.436074375 -0.7602736 0.4470911
      conf.low   conf.high  predicted predicted_hi predicted_lo      am      wt
1 -0.002271359 0.004604705 0.02311544   0.02314846   0.02311544 0.40625 3.21725
2 -0.002840114 0.006630920 0.03814134   0.03819498   0.03814134 0.40625 3.21725
3 -0.796832880 0.407477605 0.02311544   0.02303930   0.02311544 0.40625 3.21725
4 -1.186225898 0.523154241 0.03814134   0.03801168   0.03814134 0.40625 3.21725
   hp       eps
1 100 0.0283000
2 110 0.0283000
3 100 0.0003911
4 110 0.0003911
> 
> # Group-Average Marginal Effects (G-AME)
> # Calculate marginal effects for each observation, and then take the average
> # marginal effect within each subset of observations with different observed
> # values for the `cyl` variable:
> mod2 <- lm(mpg ~ hp * cyl, data = mtcars)
> mfx2 <- marginaleffects(mod2, variables = "hp", by = "cyl")
> summary(mfx2)
  Term    Contrast cyl   Effect Std. Error z value  Pr(>|z|)    2.5 %   97.5 %
1   hp mean(dY/dX)   6 -0.05226    0.02041 -2.5608 0.0104442 -0.09225 -0.01226
2   hp mean(dY/dX)   4 -0.09173    0.03533 -2.5964 0.0094216 -0.16098 -0.02248
3   hp mean(dY/dX)   8 -0.01278    0.01434 -0.8912 0.3727993 -0.04089  0.01533

Model type:  lm 
Prediction type:  response 
> 
> # Marginal Effects at User-Specified Values (counterfactual)
> # Variables not explicitly included in `datagrid()` are held at their
> # original values, and the whole dataset is duplicated once for each
> # combination of the values in `datagrid()`
> mfx <- marginaleffects(mod,
+                        newdata = datagrid(hp = c(100, 110),
+                                           grid_type = "counterfactual"))
> head(mfx)
  rowid     type term         dydx    std.error statistic   p.value
1     1 response   hp 0.0120345428 0.0099871554 1.2050021 0.2282025
2     2 response   hp 0.0141605125 0.0108083859 1.3101413 0.1901480
3     3 response   hp 0.0015641805 0.0022024746 0.7101923 0.4775849
4     4 response   hp 0.0011906427 0.0017804554 0.6687293 0.5036682
5     5 response   hp 0.0001454839 0.0003410785 0.4265408 0.6697138
6     6 response   hp 0.0001201299 0.0002911014 0.4126737 0.6798457
       conf.low    conf.high rowidcf   predicted predicted_hi predicted_lo am
1 -0.0075399221 0.0316090077       1 0.804313722  0.804654300  0.804313722  1
2 -0.0070235346 0.0353445595       2 0.312493620  0.312894363  0.312493620  1
3 -0.0027525905 0.0058809514       3 0.982084695  0.982128961  0.982084695  1
4 -0.0022989857 0.0046802710       4 0.023558258  0.023591954  0.023558258  0
5 -0.0005230176 0.0008139854       5 0.003445112  0.003449229  0.003445112  0
6 -0.0004504183 0.0006906781       6 0.002900259  0.002903658  0.002900259  0
     wt  hp    eps
1 2.620 100 0.0283
2 2.875 100 0.0283
3 2.320 100 0.0283
4 3.215 100 0.0283
5 3.440 100 0.0283
6 3.460 100 0.0283
> 
> # Heteroskedasticity robust standard errors
> marginaleffects(mod, vcov = sandwich::vcovHC(mod))
   rowid     type term          dydx    std.error   statistic     p.value
1      1 response   hp  6.983225e-03 9.187144e-03  0.76010842 0.447189783
2      2 response   hp  1.640412e-02 1.340247e-02  1.22396223 0.220966478
3      3 response   hp  2.828452e-03 4.912949e-03  0.57571361 0.564808773
4      4 response   hp  1.934876e-03 1.843501e-03  1.04956555 0.293917903
5      5 response   hp  2.992860e-03 2.782662e-03  1.07553837 0.282133765
6      6 response   hp  1.476461e-04 2.545412e-04  0.58004785 0.561882352
7      7 response   hp  5.740668e-03 8.192346e-03  0.70073546 0.483468120
8      8 response   hp  2.111702e-04 3.886726e-04  0.54331123 0.586915530
9      9 response   hp  1.646976e-03 1.727929e-03  0.95314999 0.340514083
10    10 response   hp  3.809918e-04 5.150443e-04  0.73972622 0.459466136
11    11 response   hp  3.809918e-04 5.150443e-04  0.73972622 0.459466136
12    12 response   hp  8.760463e-07 6.574577e-06  0.13324755 0.893997608
13    13 response   hp  9.575809e-05 3.219972e-04  0.29738799 0.766170311
14    14 response   hp  4.915362e-05 1.903900e-04  0.25817324 0.796273210
15    15 response   hp -5.787254e-13 8.594637e-12 -0.06733565 0.946314499
16    16 response   hp -4.902183e-14 8.735888e-13 -0.05611545 0.955249833
17    17 response   hp -7.463248e-14 1.373213e-12 -0.05434881 0.956657263
18    18 response   hp  1.107615e-02 1.420807e-02  0.77956728 0.435645620
19    19 response   hp  1.403006e-03 4.013438e-03  0.34957716 0.726656055
20    20 response   hp  1.346032e-03 2.931206e-03  0.45920765 0.646085055
21    21 response   hp  5.795830e-03 7.807260e-03  0.74236417 0.457866722
22    22 response   hp  4.644015e-04 6.992967e-04  0.66409788 0.506627668
23    23 response   hp  1.215863e-03 1.227051e-03  0.99088197 0.321743216
24    24 response   hp  1.153492e-04 6.936387e-04  0.16629576 0.867924202
25    25 response   hp  1.800542e-05 8.054465e-05  0.22354577 0.823110765
26    26 response   hp  2.339616e-03 4.551005e-03  0.51408786 0.607190567
27    27 response   hp  8.695693e-04 1.975180e-03  0.44024813 0.659757402
28    28 response   hp  4.267318e-07 2.730750e-06  0.15626907 0.875820938
29    29 response   hp  2.271717e-04 1.130909e-03  0.20087529 0.840796086
30    30 response   hp  3.179746e-04 1.377287e-03  0.23087023 0.817415616
31    31 response   hp  4.210965e-03 7.657335e-03  0.54992568 0.582370348
32    32 response   hp  1.568271e-02 7.580280e-03  2.06888256 0.038557109
33     1 response   wt -8.280303e-01 1.279527e+00 -0.64713786 0.517542725
34     2 response   wt -2.253205e+00 1.362419e+00 -1.65382633 0.098162805
35     3 response   wt -2.658461e-01 5.257923e-01 -0.50561042 0.613130163
36     4 response   wt -3.378277e-01 3.501323e-01 -0.96485732 0.334616282
37     5 response   wt -8.290222e-01 6.811943e-01 -1.21701273 0.223599374
38     6 response   wt -3.137785e-02 5.512417e-02 -0.56922131 0.569205958
39     7 response   wt -2.276351e+00 2.471021e+00 -0.92121870 0.356936256
40     8 response   wt -2.816330e-02 5.696766e-02 -0.49437345 0.621042458
41     9 response   wt -2.543997e-01 2.857380e-01 -0.89032510 0.373291345
42    10 response   wt -8.609526e-02 1.157515e-01 -0.74379421 0.457000984
43    11 response   wt -8.609526e-02 1.157515e-01 -0.74379421 0.457000984
44    12 response   wt -6.494143e-04 3.310778e-03 -0.19615159 0.844491515
45    13 response   wt -3.775892e-02 9.172958e-02 -0.41163299 0.680608450
46    14 response   wt -2.081495e-02 5.862543e-02 -0.35504993 0.722552188
47    15 response   wt -2.272851e-10 3.859969e-09 -0.05888264 0.953045588
48    16 response   wt -1.629596e-11 3.217589e-10 -0.05064649 0.959607218
49    17 response   wt -2.826816e-11 5.795693e-10 -0.04877442 0.961099064
50    18 response   wt -8.521936e-01 8.229549e-01 -1.03552890 0.300421976
51    19 response   wt -7.886841e-02 1.842446e-01 -0.42806372 0.668604733
52    20 response   wt -8.870757e-02 1.769120e-01 -0.50142208 0.616074101
53    21 response   wt -5.959105e-01 9.379795e-01 -0.63531297 0.525224319
54    22 response   wt -1.272450e-01 1.577696e-01 -0.80652389 0.419940837
55    23 response   wt -3.054369e-01 2.813059e-01 -1.08578199 0.277575456
56    24 response   wt -6.569718e-02 2.831304e-01 -0.23203857 0.816508057
57    25 response   wt -8.288936e-03 2.714899e-02 -0.30531290 0.760127851
58    26 response   wt -1.612155e-01 2.841263e-01 -0.56740790 0.570437083
59    27 response   wt -7.464417e-02 1.884619e-01 -0.39607031 0.692053163
60    28 response   wt -3.204617e-05 2.159959e-04 -0.14836470 0.882054955
61    29 response   wt -6.580439e-02 3.321209e-01 -0.19813386 0.842940336
62    30 response   wt -5.339272e-02 2.402385e-01 -0.22224887 0.824120154
63    31 response   wt -2.107162e+00 4.582922e+00 -0.45978566 0.645670075
64    32 response   wt -2.024827e+00 7.486883e-01 -2.70449961 0.006840735
        conf.low     conf.high    predicted predicted_hi predicted_lo am  hp
1  -1.102325e-02  2.498970e-02 8.983110e-01 8.985086e-01 8.983110e-01  1 110
2  -9.864245e-03  4.267249e-02 4.676447e-01 4.681089e-01 4.676447e-01  1 110
3  -6.800752e-03  1.245766e-02 9.671038e-01 9.671839e-01 9.671038e-01  1  93
4  -1.678321e-03  5.548072e-03 3.889558e-02 3.895034e-02 3.889558e-02  0 110
5  -2.461058e-03  8.446778e-03 7.648382e-02 7.656852e-02 7.648382e-02  0 175
6  -3.512456e-04  6.465378e-04 3.566962e-03 3.571140e-03 3.566962e-03  0 105
7  -1.031604e-02  2.179737e-02 1.923979e-01 1.925604e-01 1.923979e-01  0 245
8  -5.506142e-04  9.729546e-04 4.015235e-03 4.021211e-03 4.015235e-03  0  62
9  -1.739703e-03  5.033655e-03 3.120992e-02 3.125653e-02 3.120992e-02  0  95
10 -6.284766e-04  1.390460e-03 9.073330e-03 9.084112e-03 9.073330e-03  0 123
11 -6.284766e-04  1.390460e-03 9.073330e-03 9.084112e-03 9.073330e-03  0 123
12 -1.200989e-05  1.376198e-05 5.439236e-05 5.441715e-05 5.439236e-05  0 180
13 -5.353448e-04  7.268609e-04 3.172383e-03 3.175093e-03 3.172383e-03  0 180
14 -3.240040e-04  4.223113e-04 1.746319e-03 1.747710e-03 1.746319e-03  0 180
15 -1.742390e-11  1.626645e-11 1.751508e-11 1.749870e-11 1.751508e-11  0 205
16 -1.761224e-12  1.663181e-12 1.216933e-12 1.215546e-12 1.216933e-12  0 215
17 -2.766080e-12  2.616815e-12 2.017342e-12 2.015230e-12 2.017342e-12  0 230
18 -1.677116e-02  3.892346e-02 8.634101e-01 8.637236e-01 8.634101e-01  1  66
19 -6.463188e-03  9.269201e-03 9.879847e-01 9.880244e-01 9.879847e-01  1  52
20 -4.399026e-03  7.091091e-03 9.875007e-01 9.875388e-01 9.875007e-01  1  65
21 -9.506118e-03  2.109778e-02 9.243530e-01 9.245170e-01 9.243530e-01  0  97
22 -9.061949e-04  1.834998e-03 1.204113e-02 1.205428e-02 1.204113e-02  0 150
23 -1.189113e-03  3.620838e-03 2.941871e-02 2.945312e-02 2.941871e-02  0 150
24 -1.244158e-03  1.474856e-03 4.509574e-03 4.512838e-03 4.509574e-03  0 245
25 -1.398592e-04  1.758700e-04 7.069764e-04 7.074860e-04 7.069764e-04  0 175
26 -6.580190e-03  1.125942e-02 9.771760e-01 9.772422e-01 9.771760e-01  1  66
27 -3.001712e-03  4.740851e-03 9.908948e-01 9.909194e-01 9.908948e-01  1  91
28 -4.925440e-06  5.778904e-06 9.999965e-01 9.999965e-01 9.999965e-01  1 113
29 -1.989369e-03  2.443712e-03 9.957403e-01 9.957467e-01 9.957403e-01  1 264
30 -2.381458e-03  3.017407e-03 9.954493e-01 9.954583e-01 9.954493e-01  1 175
31 -1.079714e-02  1.921907e-02 8.687038e-01 8.688229e-01 8.687038e-01  1 335
32  8.256332e-04  3.053978e-02 6.593657e-01 6.598095e-01 6.593657e-01  1 109
33 -3.335857e+00  1.679796e+00 8.983110e-01 8.979872e-01 8.983110e-01  1 110
34 -4.923497e+00  4.170878e-01 4.676447e-01 4.667634e-01 4.676447e-01  1 110
35 -1.296380e+00  7.646879e-01 9.671038e-01 9.669998e-01 9.671038e-01  1  93
36 -1.024074e+00  3.484190e-01 3.889558e-02 3.876346e-02 3.889558e-02  0 110
37 -2.164139e+00  5.060942e-01 7.648382e-02 7.615959e-02 7.648382e-02  0 175
38 -1.394192e-01  7.666354e-02 3.566962e-03 3.554690e-03 3.566962e-03  0 105
39 -7.119463e+00  2.566761e+00 1.923979e-01 1.915076e-01 1.923979e-01  0 245
40 -1.398179e-01  8.349126e-02 4.015235e-03 4.004220e-03 4.015235e-03  0  62
41 -8.144358e-01  3.056364e-01 3.120992e-02 3.111043e-02 3.120992e-02  0  95
42 -3.129639e-01  1.407734e-01 9.073330e-03 9.039658e-03 9.073330e-03  0 123
43 -3.129639e-01  1.407734e-01 9.073330e-03 9.039658e-03 9.073330e-03  0 123
44 -7.138419e-03  5.839590e-03 5.439236e-05 5.413837e-05 5.439236e-05  0 180
45 -2.175456e-01  1.420277e-01 3.172383e-03 3.157615e-03 3.172383e-03  0 180
46 -1.357187e-01  9.408877e-02 1.746319e-03 1.738178e-03 1.746319e-03  0 180
47 -7.792685e-09  7.338115e-09 1.751508e-11 1.742619e-11 1.751508e-11  0 205
48 -6.469318e-10  6.143399e-10 1.216933e-12 1.210560e-12 1.216933e-12  0 215
49 -1.164203e-09  1.107667e-09 2.017342e-12 2.006286e-12 2.017342e-12  0 230
50 -2.465156e+00  7.607684e-01 8.634101e-01 8.630768e-01 8.634101e-01  1  66
51 -4.399811e-01  2.822443e-01 9.879847e-01 9.879538e-01 9.879847e-01  1  52
52 -4.354486e-01  2.580335e-01 9.875007e-01 9.874660e-01 9.875007e-01  1  65
53 -2.434316e+00  1.242495e+00 9.243530e-01 9.241200e-01 9.243530e-01  0  97
54 -4.364678e-01  1.819778e-01 1.204113e-02 1.199137e-02 1.204113e-02  0 150
55 -8.567864e-01  2.459126e-01 2.941871e-02 2.929926e-02 2.941871e-02  0 150
56 -6.206226e-01  4.892282e-01 4.509574e-03 4.483880e-03 4.509574e-03  0 245
57 -6.149997e-02  4.492210e-02 7.069764e-04 7.037346e-04 7.069764e-04  0 175
58 -7.180927e-01  3.956618e-01 9.771760e-01 9.771130e-01 9.771760e-01  1  66
59 -4.440227e-01  2.947344e-01 9.908948e-01 9.908656e-01 9.908948e-01  1  91
60 -4.553905e-04  3.912981e-04 9.999965e-01 9.999965e-01 9.999965e-01  1 113
61 -7.167493e-01  5.851405e-01 9.957403e-01 9.957145e-01 9.957403e-01  1 264
62 -5.242514e-01  4.174660e-01 9.954493e-01 9.954285e-01 9.954493e-01  1 175
63 -1.108952e+01  6.875201e+00 8.687038e-01 8.678796e-01 8.687038e-01  1 335
64 -3.492230e+00 -5.574251e-01 6.593657e-01 6.585738e-01 6.593657e-01  1 109
      wt       eps
1  2.620 0.0283000
2  2.875 0.0283000
3  2.320 0.0283000
4  3.215 0.0283000
5  3.440 0.0283000
6  3.460 0.0283000
7  3.570 0.0283000
8  3.190 0.0283000
9  3.150 0.0283000
10 3.440 0.0283000
11 3.440 0.0283000
12 4.070 0.0283000
13 3.730 0.0283000
14 3.780 0.0283000
15 5.250 0.0283000
16 5.424 0.0283000
17 5.345 0.0283000
18 2.200 0.0283000
19 1.615 0.0283000
20 1.835 0.0283000
21 2.465 0.0283000
22 3.520 0.0283000
23 3.435 0.0283000
24 3.840 0.0283000
25 3.845 0.0283000
26 1.935 0.0283000
27 2.140 0.0283000
28 1.513 0.0283000
29 3.170 0.0283000
30 2.770 0.0283000
31 3.570 0.0283000
32 2.780 0.0283000
33 2.620 0.0003911
34 2.875 0.0003911
35 2.320 0.0003911
36 3.215 0.0003911
37 3.440 0.0003911
38 3.460 0.0003911
39 3.570 0.0003911
40 3.190 0.0003911
41 3.150 0.0003911
42 3.440 0.0003911
43 3.440 0.0003911
44 4.070 0.0003911
45 3.730 0.0003911
46 3.780 0.0003911
47 5.250 0.0003911
48 5.424 0.0003911
49 5.345 0.0003911
50 2.200 0.0003911
51 1.615 0.0003911
52 1.835 0.0003911
53 2.465 0.0003911
54 3.520 0.0003911
55 3.435 0.0003911
56 3.840 0.0003911
57 3.845 0.0003911
58 1.935 0.0003911
59 2.140 0.0003911
60 1.513 0.0003911
61 3.170 0.0003911
62 2.770 0.0003911
63 3.570 0.0003911
64 2.780 0.0003911
> 
> # hypothesis test: is the `hp` marginal effect at the mean equal to the `drat` marginal effect
> mod <- lm(mpg ~ wt + drat, data = mtcars)
> 
> marginaleffects(
+     mod,
+     newdata = "mean",
+     hypothesis = "wt = drat")
      type    term      dydx std.error statistic      p.value conf.low
1 response wt=drat -6.225381  1.051769 -5.918963 3.239775e-09 -8.28681
  conf.high
1 -4.163952
> 
> # same hypothesis test using row indices
> marginaleffects(
+     mod,
+     newdata = "mean",
+     hypothesis = "b1 - b2 = 0")
      type    term      dydx std.error statistic      p.value conf.low
1 response b1-b2=0 -6.225381  1.051769 -5.918963 3.239775e-09 -8.28681
  conf.high
1 -4.163952
> 
> # same hypothesis test using numeric vector of weights
> marginaleffects(
+     mod,
+     newdata = "mean",
+     hypothesis = c(1, -1))
      type   term      dydx std.error statistic      p.value conf.low conf.high
1 response custom -6.225381  1.051769 -5.918963 3.239775e-09 -8.28681 -4.163952
> 
> # two custom contrasts using a matrix of weights
> lc <- matrix(c(
+     1, -1,
+     2, 3),
+     ncol = 2)
> colnames(lc) <- c("Contrast A", "Contrast B")
> marginaleffects(
+     mod,
+     newdata = "mean",
+     hypothesis = lc)
      type       term      dydx std.error  statistic      p.value  conf.low
1 response Contrast A -6.225381  1.051769 -5.9189632 3.239775e-09  -8.28681
2 response Contrast B -5.238308  5.623757 -0.9314607 3.516153e-01 -16.26067
  conf.high
1 -4.163952
2  5.784052
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.marginaleffects")
> ### * plot.marginaleffects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.marginaleffects
> ### Title: Point-range plot of average marginal effects
> ### Aliases: plot.marginaleffects
> 
> ### ** Examples
> 
> mod <- glm(am ~ hp + wt, data = mtcars)
> mfx <- marginaleffects(mod)
> plot(mfx)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_cap")
> ### * plot_cap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_cap
> ### Title: Plot Conditional Adjusted Predictions
> ### Aliases: plot_cap
> 
> ### ** Examples
> 
> mod <- lm(mpg ~ hp + wt, data = mtcars)
> plot_cap(mod, condition = "wt")
> 
> mod <- lm(mpg ~ hp * wt * am, data = mtcars)
> plot_cap(mod, condition = c("hp", "wt"))
> 
> plot_cap(mod, condition = list("hp", wt = "threenum"))
> 
> plot_cap(mod, condition = list("hp", wt = range))
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_cco")
> ### * plot_cco
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_cco
> ### Title: Plot Conditional Contrasts
> ### Aliases: plot_cco
> 
> ### ** Examples
> 
> mod <- lm(mpg ~ hp * drat * factor(am), data = mtcars)
> 
> plot_cco(mod, effect = "hp", condition = "drat")
> 
> plot_cco(mod, effect = "hp", condition = c("drat", "am"))
> 
> plot_cco(mod, effect = "hp", condition = list("am", "drat" = 3:5))
Error: Unable to compute predicted values with this model. You can try to
  supply a different dataset to the `newdata` argument. If this does not
  work, you can file a report on the Github Issue Tracker:
  https://github.com/vincentarelbundock/marginaleffects/issues
Execution halted
