
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "statsExpressions"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('statsExpressions')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_expression_col")
> ### * add_expression_col
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_expression_col
> ### Title: Template for expressions with statistical details
> ### Aliases: add_expression_col
> 
> ### ** Examples
> 
> set.seed(123)
> 
> # creating a data frame with stats results
> stats_df <- cbind.data.frame(
+   statistic  = 5.494,
+   df         = 29.234,
+   p.value    = 0.00001,
+   estimate   = -1.980,
+   conf.level = 0.95,
+   conf.low   = -2.873,
+   conf.high  = -1.088,
+   method     = "Student's t-test"
+ )
> 
> # expression for *t*-statistic with Cohen's *d* as effect size
> # note that the plotmath expressions need to be quoted
> add_expression_col(
+   data           = stats_df,
+   statistic.text = list(quote(italic("t"))),
+   effsize.text   = list(quote(italic("d"))),
+   n              = 32L,
+   n.text         = list(quote(italic("n")["no.obs"])),
+   k              = 3L,
+   k.df           = 3L
+ )
# A tibble: 1 × 11
  statistic    df p.value effectsize       estimate conf.level conf.low
      <dbl> <dbl>   <dbl> <chr>               <dbl>      <dbl>    <dbl>
1      5.49  29.2 0.00001 Student's t-test    -1.98       0.95    -2.87
  conf.high method           n.obs expression
      <dbl> <chr>            <int> <list>    
1     -1.09 Student's t-test    32 <language>
> 
> 
> 
> cleanEx()
> nameEx("bugs_long")
> ### * bugs_long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bugs_long
> ### Title: Tidy version of the "Bugs" dataset.
> ### Aliases: bugs_long
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dim(bugs_long)
[1] 372   6
> head(bugs_long)
# A tibble: 6 × 6
  subject gender region        education condition desire
    <int> <fct>  <fct>         <fct>     <chr>      <dbl>
1       1 Female North America some      LDLF           6
2       2 Female North America advance   LDLF          10
3       3 Female Europe        college   LDLF           5
4       4 Female North America college   LDLF           6
5       5 Female North America some      LDLF           3
6       6 Female Europe        some      LDLF           2
> dplyr::glimpse(bugs_long)
Rows: 372
Columns: 6
$ subject   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…
$ gender    <fct> Female, Female, Female, Female, Female, Female, Female, Fema…
$ region    <fct> North America, North America, Europe, North America, North A…
$ education <fct> some, advance, college, college, some, some, some, high, hig…
$ condition <chr> "LDLF", "LDLF", "LDLF", "LDLF", "LDLF", "LDLF", "LDLF", "LDL…
$ desire    <dbl> 6.0, 10.0, 5.0, 6.0, 3.0, 2.0, 10.0, 10.0, 9.5, 8.5, 0.0, 9.…
> 
> 
> 
> cleanEx()
> nameEx("centrality_description")
> ### * centrality_description
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centrality_description
> ### Title: Data frame and expression for distribution properties
> ### Aliases: centrality_description
> 
> ### ** Examples
> 
> # for reproducibility
> set.seed(123)
> 
> # ----------------------- parametric -----------------------
> 
> centrality_description(iris, Species, Sepal.Length)
# A tibble: 3 × 12
  Species    Sepal.Length std.dev   iqr   min   max skewness kurtosis n.obs
  <fct>             <dbl>   <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> <int>
1 setosa             5.01   0.352 0.400   4.3   5.8    0.120  -0.253     50
2 versicolor         5.94   0.516 0.7     4.9   7      0.105  -0.533     50
3 virginica          6.59   0.636 0.750   4.9   7.9    0.118   0.0329    50
  missing.obs expression n.expression          
        <int> <list>     <chr>                 
1           0 <language> "setosa\n(n = 50)"    
2           0 <language> "versicolor\n(n = 50)"
3           0 <language> "virginica\n(n = 50)" 
> 
> # ----------------------- non-parametric -------------------
> 
> centrality_description(mtcars, am, wt, type = "n")
# A tibble: 2 × 12
     am    wt   mad   iqr   min   max skewness kurtosis n.obs missing.obs
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> <int>       <int>
1     0  3.52 0.452 0.41   2.46  5.42    1.15     1.06     19           0
2     1  2.32 0.682 0.942  1.51  3.57    0.269   -0.654    13           0
  expression n.expression 
  <list>     <chr>        
1 <language> "0\n(n = 19)"
2 <language> "1\n(n = 13)"
> 
> # ----------------------- robust ---------------------------
> 
> centrality_description(ToothGrowth, supp, len, type = "r")
# A tibble: 2 × 12
  supp    len std.dev   iqr   min   max skewness kurtosis n.obs missing.obs
  <fct> <dbl>   <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> <int>       <int>
1 OJ     21.7    6.61  10.9   8.2  30.9   -0.580   -0.831    30           0
2 VC     16.6    8.27  12.5   4.2  33.9    0.306   -0.700    30           0
  expression n.expression  
  <list>     <chr>         
1 <language> "OJ\n(n = 30)"
2 <language> "VC\n(n = 30)"
> 
> # ----------------------- Bayesian -------------------------
> 
> centrality_description(sleep, group, extra, type = "b")
# A tibble: 2 × 11
  group  extra   iqr   min   max skewness kurtosis n.obs missing.obs expression
  <fct>  <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> <int>       <int> <list>    
1 1     0.0579  2.8   -1.6   3.7    0.581   -0.630    10           0 <language>
2 2     0.973   3.82  -0.1   5.5    0.386   -1.42     10           0 <language>
  n.expression 
  <chr>        
1 "1\n(n = 10)"
2 "2\n(n = 10)"
> 
> 
> 
> cleanEx()
> nameEx("contingency_table")
> ### * contingency_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: contingency_table
> ### Title: Contingency table analyses
> ### Aliases: contingency_table
> 
> ### ** Examples
> 
> ## Don't show: 
> if (identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # for reproducibility
+ set.seed(123)
+ library(statsExpressions)
+ 
+ # ------------------------ Frequentist -----------------------------
+ 
+ # association test
+ contingency_table(
+   data   = mtcars,
+   x      = am,
+   y      = vs,
+   paired = FALSE
+ )
+ 
+ # goodness-of-fit test
+ contingency_table(
+   data   = as.data.frame(HairEyeColor),
+   x      = Eye,
+   counts = Freq,
+   ratio  = c(0.2, 0.2, 0.3, 0.3)
+ )
+ 
+ # ------------------------ Bayesian -----------------------------
+ 
+ # association test
+ contingency_table(
+   data   = mtcars,
+   x      = am,
+   y      = vs,
+   paired = FALSE,
+   type   = "bayes"
+ )
+ 
+ # goodness-of-fit test
+ contingency_table(
+   data   = as.data.frame(HairEyeColor),
+   x      = Eye,
+   counts = Freq,
+   ratio  = c(0.2, 0.2, 0.3, 0.3),
+   type   = "bayes"
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("corr_test")
> ### * corr_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corr_test
> ### Title: Correlation analyses
> ### Aliases: corr_test
> 
> ### ** Examples
> 
> # for reproducibility
> set.seed(123)
> 
> # ----------------------- parametric -----------------------
> 
> corr_test(mtcars, wt, mpg)
# A tibble: 1 × 14
  parameter1 parameter2 effectsize          estimate conf.level conf.low
  <chr>      <chr>      <chr>                  <dbl>      <dbl>    <dbl>
1 wt         mpg        Pearson correlation   -0.868       0.95   -0.934
  conf.high statistic df.error  p.value method              n.obs conf.method
      <dbl>     <dbl>    <int>    <dbl> <chr>               <int> <chr>      
1    -0.744     -9.56       30 1.29e-10 Pearson correlation    32 normal     
  expression
  <list>    
1 <language>
> 
> # ----------------------- non-parametric -------------------
> 
> corr_test(mtcars, wt, mpg, type = "n")
# A tibble: 1 × 13
  parameter1 parameter2 effectsize           estimate conf.level conf.low
  <chr>      <chr>      <chr>                   <dbl>      <dbl>    <dbl>
1 wt         mpg        Spearman correlation   -0.886       0.95   -0.945
  conf.high statistic  p.value method               n.obs conf.method expression
      <dbl>     <dbl>    <dbl> <chr>                <int> <chr>       <list>    
1    -0.774    10292. 1.49e-11 Spearman correlation    32 normal      <language>
> 
> # ----------------------- robust ---------------------------
> 
> corr_test(mtcars, wt, mpg, type = "r")
# A tibble: 1 × 14
  parameter1 parameter2 effectsize                     estimate conf.level
  <chr>      <chr>      <chr>                             <dbl>      <dbl>
1 wt         mpg        Winsorized Pearson correlation   -0.864       0.95
  conf.low conf.high statistic df.error  p.value method                        
     <dbl>     <dbl>     <dbl>    <int>    <dbl> <chr>                         
1   -0.932    -0.738     -9.41       30 1.84e-10 Winsorized Pearson correlation
  n.obs conf.method expression
  <int> <chr>       <list>    
1    32 normal      <language>
> 
> # ----------------------- Bayesian -------------------------
> 
> corr_test(mtcars, wt, mpg, type = "b")
# A tibble: 1 × 17
  parameter1 parameter2 effectsize                   estimate conf.level
  <chr>      <chr>      <chr>                           <dbl>      <dbl>
1 wt         mpg        Bayesian Pearson correlation   -0.843       0.95
  conf.low conf.high    pd rope.percentage prior.distribution prior.location
     <dbl>     <dbl> <dbl>           <dbl> <chr>                       <dbl>
1   -0.934    -0.734     1               0 beta                         1.41
  prior.scale      bf10 method                       n.obs conf.method
        <dbl>     <dbl> <chr>                        <int> <chr>      
1        1.41 56223033. Bayesian Pearson correlation    32 HDI        
  expression
  <list>    
1 <language>
> 
> 
> 
> cleanEx()
> nameEx("iris_long")
> ### * iris_long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iris_long
> ### Title: Edgar Anderson's Iris Data in long format.
> ### Aliases: iris_long
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dim(iris_long)
[1] 600   6
> head(iris_long)
# A tibble: 6 × 6
     id Species condition    attribute measure value
  <int> <fct>   <fct>        <fct>     <fct>   <dbl>
1     1 setosa  Sepal.Length Sepal     Length    5.1
2     2 setosa  Sepal.Length Sepal     Length    4.9
3     3 setosa  Sepal.Length Sepal     Length    4.7
4     4 setosa  Sepal.Length Sepal     Length    4.6
5     5 setosa  Sepal.Length Sepal     Length    5  
6     6 setosa  Sepal.Length Sepal     Length    5.4
> dplyr::glimpse(iris_long)
Rows: 600
Columns: 6
$ id        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…
$ Species   <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, seto…
$ condition <fct> Sepal.Length, Sepal.Length, Sepal.Length, Sepal.Length, Sepa…
$ attribute <fct> Sepal, Sepal, Sepal, Sepal, Sepal, Sepal, Sepal, Sepal, Sepa…
$ measure   <fct> Length, Length, Length, Length, Length, Length, Length, Leng…
$ value     <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.8, …
> 
> 
> 
> cleanEx()
> nameEx("long_to_wide_converter")
> ### * long_to_wide_converter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: long_to_wide_converter
> ### Title: Convert long/tidy data frame to wide format with 'NA's removed
> ### Aliases: long_to_wide_converter
> 
> ### ** Examples
> 
> # for reproducibility
> library(statsExpressions)
> set.seed(123)
> 
> # repeated measures design
> long_to_wide_converter(
+   data       = bugs_long,
+   x          = condition,
+   y          = desire,
+   subject.id = subject,
+   paired     = TRUE
+ )
# A tibble: 88 × 5
   .rowid  HDHF  HDLF  LDHF  LDLF
    <int> <dbl> <dbl> <dbl> <dbl>
 1      1  10     9     6     6  
 2      3  10    10    10     5  
 3      4   9     6     9     6  
 4      5   8.5   5.5   6.5   3  
 5      6   3     7.5   0.5   2  
 6      7  10    10    10    10  
 7      8  10     9    10    10  
 8      9  10     6     9.5   9.5
 9     11   0     0     2.5   0  
10     12  10     8.5   7.5   9.5
# … with 78 more rows
> 
> # independent measures design
> long_to_wide_converter(
+   data   = mtcars,
+   x      = cyl,
+   y      = wt,
+   paired = FALSE
+ )
# A tibble: 32 × 3
   .rowid cyl      wt
    <int> <fct> <dbl>
 1      1 4      2.32
 2      2 4      3.19
 3      3 4      3.15
 4      4 4      2.2 
 5      5 4      1.62
 6      6 4      1.84
 7      7 4      2.46
 8      8 4      1.94
 9      9 4      2.14
10     10 4      1.51
# … with 22 more rows
> 
> 
> 
> cleanEx()
> nameEx("meta_analysis")
> ### * meta_analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meta_analysis
> ### Title: Random-effects meta-analysis
> ### Aliases: meta_analysis
> 
> ### ** Examples
> 
> ## Don't show: 
> if (identical(Sys.getenv("NOT_CRAN"), "true") && requireNamespace("metafor", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # setup
+ set.seed(123)
+ library(statsExpressions)
+ 
+ # a data frame with estimates and standard errors
+ # (`mag` dataset from `{metaplus}`)
+ df <- tibble::tribble(
+   ~study, ~estimate, ~std.error,
+   "Abraham", -0.83, 1.247,
+   "Bertschat", -1.056, 0.414,
+   "Ceremuzynski", -1.278, 0.808,
+   "Feldstedt", -0.043, 1.429,
+   "Golf", 0.223, 0.489,
+   "ISIS-4", -2.407, 1.072,
+   "LIMIT-2", -1.28, 1.193,
+   "Morton", -1.191, 1.661,
+   "Pereira", -0.695, 0.536,
+   "Rasmussen", -2.208, 1.109,
+   "Schechter", -2.038, 0.78,
+   "Schechter 1", -0.85, 0.618,
+   "Schechter 2", -0.793, 0.625,
+   "Singh", -0.299, 0.146,
+   "Smith", -1.57, 0.574,
+   "Thogersen", 0.057, 0.031
+ )
+ 
+ # parametric
+ meta_analysis(df)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (identical(Sys.getenv("NOT_CRAN"), "true") && requireNamespace("metaplus", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # robust
+ meta_analysis(df, type = "random", random = "normal")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (identical(Sys.getenv("NOT_CRAN"), "true") && requireNamespace("metaBMA", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Bayesian
+ meta_analysis(df, type = "bayes")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("movies_long")
> ### * movies_long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: movies_long
> ### Title: Movie information and user ratings from IMDB.com (long format).
> ### Aliases: movies_long
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dim(movies_long)
[1] 1579    8
> head(movies_long)
# A tibble: 6 × 8
  title                             year length budget rating  votes mpaa  genre
  <chr>                            <int>  <int>  <dbl>  <dbl>  <int> <fct> <fct>
1 Shawshank Redemption, The         1994    142     25    9.1 149494 R     Drama
2 Lord of the Rings: The Return o…  2003    251     94    9   103631 PG-13 Acti…
3 Lord of the Rings: The Fellowsh…  2001    208     93    8.8 157608 PG-13 Acti…
4 Lord of the Rings: The Two Towe…  2002    223     94    8.8 114797 PG-13 Acti…
5 Pulp Fiction                      1994    168      8    8.8 132745 R     Drama
6 Schindler's List                  1993    195     25    8.8  97667 R     Drama
> dplyr::glimpse(movies_long)
Rows: 1,579
Columns: 8
$ title  <chr> "Shawshank Redemption, The", "Lord of the Rings: The Return of …
$ year   <int> 1994, 2003, 2001, 2002, 1994, 1993, 1977, 1980, 1968, 2002, 196…
$ length <int> 142, 251, 208, 223, 168, 195, 125, 129, 158, 135, 93, 113, 108,…
$ budget <dbl> 25.0, 94.0, 93.0, 94.0, 8.0, 25.0, 11.0, 18.0, 5.0, 3.3, 1.8, 5…
$ rating <dbl> 9.1, 9.0, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.7, 8.7, 8.7, 8.7, 8.6…
$ votes  <int> 149494, 103631, 157608, 114797, 132745, 97667, 134640, 103706, …
$ mpaa   <fct> R, PG-13, PG-13, PG-13, R, R, PG, PG, PG-13, R, PG, R, R, R, R,…
$ genre  <fct> Drama, Action, Action, Action, Drama, Drama, Action, Action, Dr…
> 
> 
> 
> cleanEx()
> nameEx("movies_wide")
> ### * movies_wide
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: movies_wide
> ### Title: Movie information and user ratings from IMDB.com (wide format).
> ### Aliases: movies_wide
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dim(movies_wide)
[1] 1579   13
> head(movies_wide)
# A tibble: 6 × 13
  title        year length budget rating votes mpaa  Action Anima…¹ Comedy Drama
  <chr>       <int>  <int>  <dbl>  <dbl> <int> <fct>  <int>   <int>  <int> <int>
1 'Til There…  1997    113   23      4.8   799 PG-13      0       0      1     0
2 10 Things …  1999     97   16      6.7 19095 PG-13      0       0      1     0
3 100 Mile R…  2002     98    1.1    5.6   181 R          0       0      1     0
4 13 Going O…  2004     98   37      6.4  7859 PG-13      0       0      1     1
5 13th Warri…  1999    102   85      6.1 14344 R          1       0      0     0
6 15 Minutes   2001    120   42      6.1 10866 R          0       0      0     1
# … with 2 more variables: Romance <int>, NumGenre <int>, and abbreviated
#   variable name ¹​Animation
> dplyr::glimpse(movies_wide)
Rows: 1,579
Columns: 13
$ title     <chr> "'Til There Was You", "10 Things I Hate About You", "100 Mil…
$ year      <int> 1997, 1999, 2002, 2004, 1999, 2001, 1972, 2003, 1999, 2000, …
$ length    <int> 113, 97, 98, 98, 102, 120, 180, 107, 101, 99, 129, 124, 93, …
$ budget    <dbl> 23.0, 16.0, 1.1, 37.0, 85.0, 42.0, 4.0, 76.0, 6.0, 26.0, 12.…
$ rating    <dbl> 4.8, 6.7, 5.6, 6.4, 6.1, 6.1, 7.3, 5.1, 5.4, 2.5, 7.6, 8.0, …
$ votes     <int> 799, 19095, 181, 7859, 14344, 10866, 1754, 9556, 4514, 2023,…
$ mpaa      <fct> PG-13, PG-13, R, PG-13, R, R, PG, PG-13, R, R, R, R, R, R, P…
$ Action    <int> 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, …
$ Animation <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …
$ Comedy    <int> 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, …
$ Drama     <int> 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, …
$ Romance   <int> 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, …
$ NumGenre  <int> 2, 2, 1, 3, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 3, 2, 2, 1, …
> 
> 
> 
> cleanEx()
> nameEx("one_sample_test")
> ### * one_sample_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: one_sample_test
> ### Title: One-sample tests
> ### Aliases: one_sample_test
> 
> ### ** Examples
> 
> # for reproducibility
> set.seed(123)
> 
> # ----------------------- parametric -----------------------
> 
> one_sample_test(mtcars, wt, test.value = 3)
# A tibble: 1 × 15
     mu statistic df.error p.value method            alternative effectsize
  <dbl>     <dbl>    <dbl>   <dbl> <chr>             <chr>       <chr>     
1     3      1.26       31   0.218 One Sample t-test two.sided   Hedges' g 
  estimate conf.level conf.low conf.high conf.method conf.distribution n.obs
     <dbl>      <dbl>    <dbl>     <dbl> <chr>       <chr>             <int>
1    0.217       0.95   -0.127     0.557 ncp         t                    32
  expression
  <list>    
1 <language>
> 
> # ----------------------- non-parametric -------------------
> 
> one_sample_test(mtcars, wt, test.value = 3, type = "n")
# A tibble: 1 × 12
  statistic p.value method                    alternative effectsize       
      <dbl>   <dbl> <chr>                     <chr>       <chr>            
1       319   0.308 Wilcoxon signed rank test two.sided   r (rank biserial)
  estimate conf.level conf.low conf.high conf.method n.obs expression
     <dbl>      <dbl>    <dbl>     <dbl> <chr>       <int> <list>    
1    0.208       0.95   -0.184     0.543 normal         32 <language>
> 
> # ----------------------- robust ---------------------------
> 
> one_sample_test(mtcars, wt, test.value = 3, type = "r")
# A tibble: 1 × 10
  statistic p.value n.obs method                                 effectsize  
      <dbl>   <dbl> <int> <chr>                                  <chr>       
1      1.18   0.275    32 Bootstrap-t method for one-sample test Trimmed mean
  estimate conf.level conf.low conf.high expression
     <dbl>      <dbl>    <dbl>     <dbl> <list>    
1     3.20       0.95     2.85      3.54 <language>
> 
> # ----------------------- Bayesian -------------------------
> 
> one_sample_test(mtcars, wt, test.value = 3, type = "b")
# A tibble: 1 × 16
  term       effectsize      estimate conf.level conf.low conf.high    pd
  <chr>      <chr>              <dbl>      <dbl>    <dbl>     <dbl> <dbl>
1 Difference Bayesian t-test    0.195       0.95   -0.165     0.555  0.86
  prior.distribution prior.location prior.scale  bf10 method         
  <chr>                       <dbl>       <dbl> <dbl> <chr>          
1 cauchy                          0       0.707 0.387 Bayesian t-test
  conf.method log_e_bf10 n.obs expression
  <chr>            <dbl> <int> <list>    
1 ETI             -0.950    32 <language>
> 
> 
> 
> cleanEx()
> nameEx("oneway_anova")
> ### * oneway_anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: oneway_anova
> ### Title: One-way analysis of variance (ANOVA)
> ### Aliases: oneway_anova
> 
> ### ** Examples
> 
> ## Don't show: 
> if (identical(Sys.getenv("NOT_CRAN"), "true") && requireNamespace("afex", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # for reproducibility
+ set.seed(123)
+ library(statsExpressions)
+ suppressPackageStartupMessages(library(afex)) # for within-subjects parametric ANOVA
+ 
+ # ----------------------- parametric -------------------------------------
+ 
+ # between-subjects
+ oneway_anova(
+   data = mtcars,
+   x    = cyl,
+   y    = wt
+ )
+ 
+ # within-subjects design
+ oneway_anova(
+   data       = iris_long,
+   x          = condition,
+   y          = value,
+   subject.id = id,
+   paired     = TRUE
+ )
+ 
+ # ----------------------- non-parametric ----------------------------------
+ 
+ # between-subjects
+ oneway_anova(
+   data = mtcars,
+   x    = cyl,
+   y    = wt,
+   type = "np"
+ )
+ 
+ # within-subjects design
+ oneway_anova(
+   data       = iris_long,
+   x          = condition,
+   y          = value,
+   subject.id = id,
+   paired     = TRUE,
+   type       = "np"
+ )
+ 
+ # ----------------------- robust -------------------------------------
+ 
+ # between-subjects
+ oneway_anova(
+   data = mtcars,
+   x    = cyl,
+   y    = wt,
+   type = "r"
+ )
+ 
+ # within-subjects design
+ oneway_anova(
+   data       = iris_long,
+   x          = condition,
+   y          = value,
+   subject.id = id,
+   paired     = TRUE,
+   type       = "r"
+ )
+ 
+ # ----------------------- Bayesian -------------------------------------
+ 
+ # between-subjects
+ oneway_anova(
+   data = mtcars,
+   x    = cyl,
+   y    = wt,
+   type = "bayes"
+ )
+ 
+ # within-subjects design
+ oneway_anova(
+   data       = iris_long,
+   x          = condition,
+   y          = value,
+   subject.id = id,
+   paired     = TRUE,
+   type       = "bayes"
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("p_adjust_text")
> ### * p_adjust_text
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: p_adjust_text
> ### Title: _p_-value adjustment method text
> ### Aliases: p_adjust_text
> 
> ### ** Examples
> 
> p_adjust_text("none")
[1] "None"
> p_adjust_text("BY")
[1] "BY"
> 
> 
> 
> 
> cleanEx()
> nameEx("pairwise_comparisons")
> ### * pairwise_comparisons
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pairwise_comparisons
> ### Title: Multiple pairwise comparison for one-way design
> ### Aliases: pairwise_comparisons
> 
> ### ** Examples
> 
> ## Don't show: 
> if (identical(Sys.getenv("NOT_CRAN"), "true") && requireNamespace("PMCMRplus", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # for reproducibility
+ set.seed(123)
+ library(statsExpressions)
+ library(PMCMRplus)
+ 
+ #------------------- between-subjects design ----------------------------
+ 
+ # parametric
+ # if `var.equal = TRUE`, then Student's t-test will be run
+ pairwise_comparisons(
+   data            = mtcars,
+   x               = cyl,
+   y               = wt,
+   type            = "parametric",
+   var.equal       = TRUE,
+   paired          = FALSE,
+   p.adjust.method = "none"
+ )
+ 
+ # if `var.equal = FALSE`, then Games-Howell test will be run
+ pairwise_comparisons(
+   data            = mtcars,
+   x               = cyl,
+   y               = wt,
+   type            = "parametric",
+   var.equal       = FALSE,
+   paired          = FALSE,
+   p.adjust.method = "bonferroni"
+ )
+ 
+ # non-parametric (Dunn test)
+ pairwise_comparisons(
+   data            = mtcars,
+   x               = cyl,
+   y               = wt,
+   type            = "nonparametric",
+   paired          = FALSE,
+   p.adjust.method = "none"
+ )
+ 
+ # robust (Yuen's trimmed means *t*-test)
+ pairwise_comparisons(
+   data            = mtcars,
+   x               = cyl,
+   y               = wt,
+   type            = "robust",
+   paired          = FALSE,
+   p.adjust.method = "fdr"
+ )
+ 
+ # Bayes Factor (Student's *t*-test)
+ pairwise_comparisons(
+   data   = mtcars,
+   x      = cyl,
+   y      = wt,
+   type   = "bayes",
+   paired = FALSE
+ )
+ 
+ #------------------- within-subjects design ----------------------------
+ 
+ # parametric (Student's *t*-test)
+ pairwise_comparisons(
+   data            = bugs_long,
+   x               = condition,
+   y               = desire,
+   subject.id      = subject,
+   type            = "parametric",
+   paired          = TRUE,
+   p.adjust.method = "BH"
+ )
+ 
+ # non-parametric (Durbin-Conover test)
+ pairwise_comparisons(
+   data            = bugs_long,
+   x               = condition,
+   y               = desire,
+   subject.id      = subject,
+   type            = "nonparametric",
+   paired          = TRUE,
+   p.adjust.method = "BY"
+ )
+ 
+ # robust (Yuen's trimmed means t-test)
+ pairwise_comparisons(
+   data            = bugs_long,
+   x               = condition,
+   y               = desire,
+   subject.id      = subject,
+   type            = "robust",
+   paired          = TRUE,
+   p.adjust.method = "hommel"
+ )
+ 
+ # Bayes Factor (Student's *t*-test)
+ pairwise_comparisons(
+   data       = bugs_long,
+   x          = condition,
+   y          = desire,
+   subject.id = subject,
+   type       = "bayes",
+   paired     = TRUE
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("stats_type_switch")
> ### * stats_type_switch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stats_type_switch
> ### Title: Switch the type of statistics.
> ### Aliases: stats_type_switch
> 
> ### ** Examples
> 
> stats_type_switch("p")
[1] "parametric"
> stats_type_switch("bf")
[1] "bayes"
> 
> 
> 
> cleanEx()
> nameEx("tidy_model_expressions")
> ### * tidy_model_expressions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_model_expressions
> ### Title: Expressions with statistics for tidy regression data frames
> ### Aliases: tidy_model_expressions
> 
> ### ** Examples
> 
> ## Don't show: 
> if (identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # setup
+ set.seed(123)
+ library(statsExpressions)
+ 
+ # extract a tidy data frame
+ df <- tidy_model_parameters(lm(wt ~ am * cyl, mtcars))
+ 
+ # create a column containing expression; the expression will depend on `statistic`
+ tidy_model_expressions(df, statistic = "t")
+ tidy_model_expressions(df, statistic = "z")
+ tidy_model_expressions(df, statistic = "chi")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy_model_parameters")
> ### * tidy_model_parameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_model_parameters
> ### Title: Convert '{parameters}' package output to '{tidyverse}'
> ###   conventions
> ### Aliases: tidy_model_parameters
> 
> ### ** Examples
> 
> model <- lm(mpg ~ wt + cyl, data = mtcars)
> tidy_model_parameters(model)
# A tibble: 3 × 10
  term  estim…¹ std.e…² conf.…³ conf.…⁴ conf.…⁵ stati…⁶ df.er…⁷  p.value conf.…⁸
  <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <int>    <dbl> <chr>  
1 (Int…   39.7    1.71     0.95   36.2   43.2     23.1       29 3.04e-20 Wald   
2 wt      -3.19   0.757    0.95   -4.74  -1.64    -4.22      29 2.22e- 4 Wald   
3 cyl     -1.51   0.415    0.95   -2.36  -0.660   -3.64      29 1.06e- 3 Wald   
# … with abbreviated variable names ¹​estimate, ²​std.error, ³​conf.level,
#   ⁴​conf.low, ⁵​conf.high, ⁶​statistic, ⁷​df.error, ⁸​conf.method
> 
> 
> 
> cleanEx()
> nameEx("two_sample_test")
> ### * two_sample_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: two_sample_test
> ### Title: Two-sample tests
> ### Aliases: two_sample_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # for reproducibility
+ set.seed(123)
+ library(statsExpressions)
+ 
+ # parametric -------------------------------------
+ 
+ # between-subjects design
+ two_sample_test(
+   data = sleep,
+   x    = group,
+   y    = extra,
+   type = "p"
+ )
+ 
+ # within-subjects design
+ two_sample_test(
+   data       = dplyr::filter(bugs_long, condition %in% c("HDHF", "HDLF")),
+   x          = condition,
+   y          = desire,
+   paired     = TRUE,
+   subject.id = subject,
+   type       = "p"
+ )
+ 
+ # non-parametric ----------------------------------
+ 
+ # between-subjects design
+ two_sample_test(
+   data = sleep,
+   x    = group,
+   y    = extra,
+   type = "np"
+ )
+ 
+ # within-subjects design
+ two_sample_test(
+   data       = dplyr::filter(bugs_long, condition %in% c("HDHF", "HDLF")),
+   x          = condition,
+   y          = desire,
+   paired     = TRUE,
+   subject.id = subject,
+   type       = "np"
+ )
+ 
+ # robust ----------------------------------
+ 
+ # between-subjects design
+ two_sample_test(
+   data = sleep,
+   x    = group,
+   y    = extra,
+   type = "r"
+ )
+ 
+ # within-subjects design
+ two_sample_test(
+   data       = dplyr::filter(bugs_long, condition %in% c("HDHF", "HDLF")),
+   x          = condition,
+   y          = desire,
+   paired     = TRUE,
+   subject.id = subject,
+   type       = "r"
+ )
+ 
+ #' # Bayesian ------------------------------
+ 
+ # between-subjects design
+ two_sample_test(
+   data = sleep,
+   x    = group,
+   y    = extra,
+   type = "bayes"
+ )
+ 
+ # within-subjects design
+ two_sample_test(
+   data       = dplyr::filter(bugs_long, condition %in% c("HDHF", "HDLF")),
+   x          = condition,
+   y          = desire,
+   paired     = TRUE,
+   subject.id = subject,
+   type       = "bayes"
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.42 0.44 7.39 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
