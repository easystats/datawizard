
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ggstatsplot"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('ggstatsplot')
You can cite this package as:
     Patil, I. (2021). Visualizations with statistical details: The 'ggstatsplot' approach.
     Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Titanic_full")
> ### * Titanic_full
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Titanic_full
> ### Title: Titanic dataset.
> ### Aliases: Titanic_full
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dim(Titanic_full)
[1] 2201    5
> head(Titanic_full)
# A tibble: 6 × 5
     id Class Sex   Age   Survived
  <dbl> <fct> <fct> <fct> <fct>   
1     1 3rd   Male  Child No      
2     2 3rd   Male  Child No      
3     3 3rd   Male  Child No      
4     4 3rd   Male  Child No      
5     5 3rd   Male  Child No      
6     6 3rd   Male  Child No      
> dplyr::glimpse(Titanic_full)
Rows: 2,201
Columns: 5
$ id       <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…
$ Class    <fct> 3rd, 3rd, 3rd, 3rd, 3rd, 3rd, 3rd, 3rd, 3rd, 3rd, 3rd, 3rd, 3…
$ Sex      <fct> Male, Male, Male, Male, Male, Male, Male, Male, Male, Male, M…
$ Age      <fct> Child, Child, Child, Child, Child, Child, Child, Child, Child…
$ Survived <fct> No, No, No, No, No, No, No, No, No, No, No, No, No, No, No, N…
> 
> 
> 
> cleanEx()
> nameEx("bugs_long")
> ### * bugs_long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bugs_long
> ### Title: Tidy version of the "Bugs" dataset.
> ### Aliases: bugs_long
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dim(bugs_long)
[1] 372   6
> head(bugs_long)
# A tibble: 6 × 6
  subject gender region        education condition desire
    <int> <fct>  <fct>         <fct>     <chr>      <dbl>
1       1 Female North America some      LDLF           6
2       2 Female North America advance   LDLF          10
3       3 Female Europe        college   LDLF           5
4       4 Female North America college   LDLF           6
5       5 Female North America some      LDLF           3
6       6 Female Europe        some      LDLF           2
> dplyr::glimpse(bugs_long)
Rows: 372
Columns: 6
$ subject   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…
$ gender    <fct> Female, Female, Female, Female, Female, Female, Female, Fema…
$ region    <fct> North America, North America, Europe, North America, North A…
$ education <fct> some, advance, college, college, some, some, some, high, hig…
$ condition <chr> "LDLF", "LDLF", "LDLF", "LDLF", "LDLF", "LDLF", "LDLF", "LDL…
$ desire    <dbl> 6.0, 10.0, 5.0, 6.0, 3.0, 2.0, 10.0, 10.0, 9.5, 8.5, 0.0, 9.…
> 
> 
> 
> cleanEx()
> nameEx("bugs_wide")
> ### * bugs_wide
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bugs_wide
> ### Title: Wide-format version of the "Bugs" dataset.
> ### Aliases: bugs_wide
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dim(bugs_wide)
[1] 93  8
> head(bugs_wide)
# A tibble: 6 × 8
  subject gender region        education  ldlf  ldhf  hdlf  hdhf
    <int> <fct>  <fct>         <fct>     <dbl> <dbl> <dbl> <dbl>
1       1 Female North America some          6   6     9    10  
2       2 Female North America advance      10  NA    10    10  
3       3 Female Europe        college       5  10    10    10  
4       4 Female North America college       6   9     6     9  
5       5 Female North America some          3   6.5   5.5   8.5
6       6 Female Europe        some          2   0.5   7.5   3  
> dplyr::glimpse(bugs_wide)
Rows: 93
Columns: 8
$ subject   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…
$ gender    <fct> Female, Female, Female, Female, Female, Female, Female, Fema…
$ region    <fct> North America, North America, Europe, North America, North A…
$ education <fct> some, advance, college, college, some, some, some, high, hig…
$ ldlf      <dbl> 6.0, 10.0, 5.0, 6.0, 3.0, 2.0, 10.0, 10.0, 9.5, 8.5, 0.0, 9.…
$ ldhf      <dbl> 6.0, NA, 10.0, 9.0, 6.5, 0.5, 10.0, 10.0, 9.5, 10.0, 2.5, 7.…
$ hdlf      <dbl> 9.0, 10.0, 10.0, 6.0, 5.5, 7.5, 10.0, 9.0, 6.0, 7.0, 0.0, 8.…
$ hdhf      <dbl> 10.0, 10.0, 10.0, 9.0, 8.5, 3.0, 10.0, 10.0, 10.0, NA, 0.0, …
> 
> 
> 
> cleanEx()
> nameEx("combine_plots")
> ### * combine_plots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combine_plots
> ### Title: Combining and arranging multiple plots in a grid
> ### Aliases: combine_plots
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # preparing the first plot
> p1 <- ggplot(
+   data = subset(iris, iris$Species == "setosa"),
+   aes(x = Sepal.Length, y = Sepal.Width)
+ ) +
+   geom_point() +
+   labs(title = "setosa")
> 
> # preparing the second plot
> p2 <- ggplot(
+   data = subset(iris, iris$Species == "versicolor"),
+   aes(x = Sepal.Length, y = Sepal.Width)
+ ) +
+   geom_point() +
+   labs(title = "versicolor")
> 
> # combining the plot with a title and a caption
> combine_plots(
+   plotlist = list(p1, p2),
+   plotgrid.args = list(nrow = 1),
+   annotation.args = list(
+     tag_levels = "a",
+     title = "Dataset: Iris Flower dataset",
+     subtitle = "Edgar Anderson collected this data",
+     caption = "Note: Only two species of flower are displayed",
+     theme = theme(
+       plot.subtitle = element_text(size = 20),
+       plot.title = element_text(size = 30)
+     )
+   )
+ )
> 
> 
> 
> cleanEx()

detaching 'package:ggplot2'

> nameEx("dot-grouped_list")
> ### * dot-grouped_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .grouped_list
> ### Title: Split data frame into a list by grouping variable.
> ### Aliases: .grouped_list
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("extract_stats")
> ### * extract_stats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_stats
> ### Title: Extracting data frames or expressions from '{ggstatsplot}' plots
> ### Aliases: extract_stats extract_subtitle extract_caption
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("PMCMRplus", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ggbarstats")
> ### * ggbarstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggbarstats
> ### Title: Stacked bar charts with statistical tests
> ### Aliases: ggbarstats
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ggbetweenstats")
> ### * ggbetweenstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggbetweenstats
> ### Title: Box/Violin plots for between-subjects comparisons
> ### Aliases: ggbetweenstats
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("PMCMRplus", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ggcoefstats")
> ### * ggcoefstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggcoefstats
> ### Title: Dot-and-whisker plots for regression analyses
> ### Aliases: ggcoefstats
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("lme4", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ggcorrmat")
> ### * ggcorrmat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggcorrmat
> ### Title: Visualization of a correlation matrix
> ### Aliases: ggcorrmat
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("ggcorrplot", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # for reproducibility
+ set.seed(123)
+ library(ggcorrplot) # for plot
+ 
+ # to get a plot
+ ggcorrmat(iris)
+ 
+ # to get a data frame
+ ggcorrmat(
+   data = ggplot2::msleep,
+   cor.vars = sleep_total:bodywt,
+   partial = TRUE,
+   output = "dataframe"
+ )
+ ## Don't show: 
+ }) # examplesIf
> set.seed(123)
> library(ggcorrplot)
Loading required package: ggplot2
> ggcorrmat(iris)
> ggcorrmat(data = ggplot2::msleep, cor.vars = sleep_total:bodywt, partial = TRUE, 
+     output = "dataframe")
# A tibble: 15 × 11
   parameter1 param…¹ estimate conf.…² conf.…³ conf.…⁴ statistic df.er…⁵ p.value
   <chr>      <chr>      <dbl>   <dbl>   <dbl>   <dbl>     <dbl>   <int>   <dbl>
 1 sleep_tot… sleep_…  0.314      0.95 -0.0520   0.606    1.75        28 1   e+0
 2 sleep_tot… sleep_… -0.0225     0.95 -0.380    0.341   -0.119       28 1   e+0
 3 sleep_tot… awake   -1          0.95 -1       -1     -Inf           28 0      
 4 sleep_tot… brainwt -0.0970     0.95 -0.442    0.273   -0.516       28 1   e+0
 5 sleep_tot… bodywt  -0.179      0.95 -0.506    0.194   -0.961       28 1   e+0
 6 sleep_rem  sleep_… -0.0766     0.95 -0.425    0.292   -0.407       28 1   e+0
 7 sleep_rem  awake    0.0560     0.95 -0.311    0.408    0.297       28 1   e+0
 8 sleep_rem  brainwt  0.0857     0.95 -0.283    0.433    0.455       28 1   e+0
 9 sleep_rem  bodywt  -0.0341     0.95 -0.390    0.330   -0.181       28 1   e+0
10 sleep_cyc… awake   -0.00479    0.95 -0.364    0.356   -0.0253      28 1   e+0
11 sleep_cyc… brainwt  0.801      0.95  0.620    0.901    7.08        28 1.48e-6
12 sleep_cyc… bodywt  -0.0949     0.95 -0.440    0.275   -0.505       28 1   e+0
13 awake      brainwt -0.0957     0.95 -0.441    0.274   -0.509       28 1   e+0
14 awake      bodywt  -0.448      0.95 -0.696   -0.104   -2.65        28 1.70e-1
15 brainwt    bodywt   0.252      0.95 -0.119    0.561    1.38        28 1   e+0
# … with 2 more variables: method <chr>, n.obs <int>, and abbreviated variable
#   names ¹​parameter2, ²​conf.level, ³​conf.low, ⁴​conf.high, ⁵​df.error
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching 'package:ggcorrplot', 'package:ggplot2'

> nameEx("ggdotplotstats")
> ### * ggdotplotstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggdotplotstats
> ### Title: Dot plot/chart for labeled numeric data.
> ### Aliases: ggdotplotstats
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("gghistostats")
> ### * gghistostats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gghistostats
> ### Title: Histogram for distribution of a numeric variable
> ### Aliases: gghistostats
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ggpiestats")
> ### * ggpiestats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggpiestats
> ### Title: Pie charts with statistical tests
> ### Aliases: ggpiestats
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ggscatterstats")
> ### * ggscatterstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggscatterstats
> ### Title: Scatterplot with marginal distributions and statistical results
> ### Aliases: ggscatterstats
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("ggside", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ set.seed(123)
+ library(ggside) # for plotting marginals
+ 
+ # creating a plot
+ p <- ggscatterstats(
+   iris,
+   x = Sepal.Width,
+   y = Petal.Length,
+   label.var = Species,
+   label.expression = Sepal.Length > 7.6
+ ) +
+   ggplot2::geom_rug(sides = "b")
+ 
+ 
+ # looking at the plot
+ p
+ 
+ # extracting details from statistical tests
+ extract_stats(p)
+ ## Don't show: 
+ }) # examplesIf
> set.seed(123)
> library(ggside)
Loading required package: ggplot2
> p <- ggscatterstats(iris, x = Sepal.Width, y = Petal.Length, label.var = Species, 
+     label.expression = Sepal.Length > 7.6) + ggplot2::geom_rug(sides = "b")
> p
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> extract_stats(p)
$subtitle_data
# A tibble: 1 × 14
  parameter1  parameter2   effectsize          estimate conf.level conf.low
  <chr>       <chr>        <chr>                  <dbl>      <dbl>    <dbl>
1 Sepal.Width Petal.Length Pearson correlation   -0.428       0.95   -0.551
  conf.high statistic df.error      p.value method              n.obs
      <dbl>     <dbl>    <int>        <dbl> <chr>               <int>
1    -0.288     -5.77      148 0.0000000451 Pearson correlation   150
  conf.method expression
  <chr>       <list>    
1 normal      <language>

$caption_data
# A tibble: 1 × 17
  parameter1  parameter2   effectsize                   estimate conf.level
  <chr>       <chr>        <chr>                           <dbl>      <dbl>
1 Sepal.Width Petal.Length Bayesian Pearson correlation   -0.422       0.95
  conf.low conf.high    pd rope.percentage prior.distribution prior.location
     <dbl>     <dbl> <dbl>           <dbl> <chr>                       <dbl>
1   -0.551    -0.290     1               0 beta                         1.41
  prior.scale    bf10 method                       n.obs conf.method expression
        <dbl>   <dbl> <chr>                        <int> <chr>       <list>    
1        1.41 312665. Bayesian Pearson correlation   150 HDI         <language>

$pairwise_comparisons_data
NULL

$descriptive_data
NULL

$one_sample_data
NULL

$tidy_data
NULL

$glance_data
NULL

> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching 'package:ggside', 'package:ggplot2'

> nameEx("ggwithinstats")
> ### * ggwithinstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggwithinstats
> ### Title: Box/Violin plots for repeated measures comparisons
> ### Aliases: ggwithinstats
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("afex", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("grouped_ggbarstats")
> ### * grouped_ggbarstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_ggbarstats
> ### Title: Grouped bar charts with statistical tests
> ### Aliases: grouped_ggbarstats
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("grouped_ggbetweenstats")
> ### * grouped_ggbetweenstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_ggbetweenstats
> ### Title: Violin plots for group or condition comparisons in
> ###   between-subjects designs repeated across all levels of a grouping
> ###   variable.
> ### Aliases: grouped_ggbetweenstats
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("PMCMRplus", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("grouped_ggcorrmat")
> ### * grouped_ggcorrmat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_ggcorrmat
> ### Title: Visualization of a correlalogram (or correlation matrix) for all
> ###   levels of a grouping variable
> ### Aliases: grouped_ggcorrmat
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("ggcorrplot", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("grouped_ggdotplotstats")
> ### * grouped_ggdotplotstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_ggdotplotstats
> ### Title: Grouped histograms for distribution of a labeled numeric
> ###   variable
> ### Aliases: grouped_ggdotplotstats
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("grouped_gghistostats")
> ### * grouped_gghistostats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_gghistostats
> ### Title: Grouped histograms for distribution of a numeric variable
> ### Aliases: grouped_gghistostats
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("grouped_ggpiestats")
> ### * grouped_ggpiestats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_ggpiestats
> ### Title: Grouped pie charts with statistical tests
> ### Aliases: grouped_ggpiestats
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("grouped_ggscatterstats")
> ### * grouped_ggscatterstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_ggscatterstats
> ### Title: Scatterplot with marginal distributions for all levels of a
> ###   grouping variable
> ### Aliases: grouped_ggscatterstats
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("ggside", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("grouped_ggwithinstats")
> ### * grouped_ggwithinstats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grouped_ggwithinstats
> ### Title: Violin plots for group or condition comparisons in
> ###   within-subjects designs repeated across all levels of a grouping
> ###   variable.
> ### Aliases: grouped_ggwithinstats
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("afex", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("iris_long")
> ### * iris_long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iris_long
> ### Title: Edgar Anderson's Iris Data in long format.
> ### Aliases: iris_long
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dim(iris_long)
[1] 600   6
> head(iris_long)
# A tibble: 6 × 6
     id Species condition    attribute measure value
  <int> <fct>   <fct>        <fct>     <fct>   <dbl>
1     1 setosa  Sepal.Length Sepal     Length    5.1
2     2 setosa  Sepal.Length Sepal     Length    4.9
3     3 setosa  Sepal.Length Sepal     Length    4.7
4     4 setosa  Sepal.Length Sepal     Length    4.6
5     5 setosa  Sepal.Length Sepal     Length    5  
6     6 setosa  Sepal.Length Sepal     Length    5.4
> dplyr::glimpse(iris_long)
Rows: 600
Columns: 6
$ id        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…
$ Species   <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, seto…
$ condition <fct> Sepal.Length, Sepal.Length, Sepal.Length, Sepal.Length, Sepa…
$ attribute <fct> Sepal, Sepal, Sepal, Sepal, Sepal, Sepal, Sepal, Sepal, Sepa…
$ measure   <fct> Length, Length, Length, Length, Length, Length, Length, Leng…
$ value     <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.8, …
> 
> 
> 
> cleanEx()
> nameEx("movies_long")
> ### * movies_long
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: movies_long
> ### Title: Movie information and user ratings from IMDB.com (long format).
> ### Aliases: movies_long
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dim(movies_long)
[1] 1579    8
> head(movies_long)
# A tibble: 6 × 8
  title                             year length budget rating  votes mpaa  genre
  <chr>                            <int>  <int>  <dbl>  <dbl>  <int> <fct> <fct>
1 Shawshank Redemption, The         1994    142     25    9.1 149494 R     Drama
2 Lord of the Rings: The Return o…  2003    251     94    9   103631 PG-13 Acti…
3 Lord of the Rings: The Fellowsh…  2001    208     93    8.8 157608 PG-13 Acti…
4 Lord of the Rings: The Two Towe…  2002    223     94    8.8 114797 PG-13 Acti…
5 Pulp Fiction                      1994    168      8    8.8 132745 R     Drama
6 Schindler's List                  1993    195     25    8.8  97667 R     Drama
> dplyr::glimpse(movies_long)
Rows: 1,579
Columns: 8
$ title  <chr> "Shawshank Redemption, The", "Lord of the Rings: The Return of …
$ year   <int> 1994, 2003, 2001, 2002, 1994, 1993, 1977, 1980, 1968, 2002, 196…
$ length <int> 142, 251, 208, 223, 168, 195, 125, 129, 158, 135, 93, 113, 108,…
$ budget <dbl> 25.0, 94.0, 93.0, 94.0, 8.0, 25.0, 11.0, 18.0, 5.0, 3.3, 1.8, 5…
$ rating <dbl> 9.1, 9.0, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.7, 8.7, 8.7, 8.7, 8.6…
$ votes  <int> 149494, 103631, 157608, 114797, 132745, 97667, 134640, 103706, …
$ mpaa   <fct> R, PG-13, PG-13, PG-13, R, R, PG, PG, PG-13, R, PG, R, R, R, R,…
$ genre  <fct> Drama, Action, Action, Action, Drama, Drama, Action, Action, Dr…
> 
> 
> 
> cleanEx()
> nameEx("theme_ggstatsplot")
> ### * theme_ggstatsplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_ggstatsplot
> ### Title: Default theme used in '{ggstatsplot}'
> ### Aliases: theme_ggstatsplot
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> 
> ggplot(mtcars, aes(wt, mpg)) +
+   geom_point() +
+   theme_ggstatsplot()
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching 'package:ggplot2'

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.21 0.69 8.9 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
