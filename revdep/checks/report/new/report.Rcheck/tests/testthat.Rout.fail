
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(report)
> 
> is_dev_version <- length(strsplit(packageDescription("report")$Version, "\\.")[[1]]) > 3
> 
> if (is_dev_version) {
+   Sys.setenv("RunAllreportTests" = "yes")
+ } else {
+   Sys.setenv("RunAllreportTests" = "no")
+ }
> 
> si <- Sys.info()
> 
> osx <- tryCatch(
+   {
+     if (!is.null(si["sysname"])) {
+       si["sysname"] == "Darwin" || grepl("^darwin", R.version$os)
+     } else {
+       FALSE
+     }
+   },
+   error = function(e) {
+     FALSE
+   }
+ )
> 
> solaris <- tryCatch(
+   {
+     if (!is.null(si["sysname"])) {
+       grepl("SunOS", si["sysname"], ignore.case = TRUE)
+     } else {
+       FALSE
+     }
+   },
+   error = function(e) {
+     FALSE
+   }
+ )
> 
> # disable / enable if needed
> if (.Platform$OS.type == "unix" && is_dev_version) {
+   Sys.setenv("RunAllreportStanTests" = "yes")
+ } else {
+   Sys.setenv("RunAllreportStanTests" = "no")
+ }
> 
> if (!osx && !solaris) {
+   test_check("report")
+ }
Loading required package: lme4
Loading required package: Matrix
Loading required package: rstanarm
Loading required package: Rcpp
This is rstanarm version 2.21.3
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
Loading required package: bayestestR
Loading required package: ivreg
Loading required package: lavaan
This is lavaan 0.6-13
lavaan is FREE software! Please report any bugs.
Loading required package: effectsize
boundary (singular) fit: see help('isSingular')
Loading required package: survival
[ FAIL 11 | WARN 4 | SKIP 5 | PASS 59 ]

══ Skipped tests ═══════════════════════════════════════════════════════════════
• On CRAN (3)
• getRversion() <= "4.2.1" is not TRUE (2)

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-report.aov.R:3'): report.aov ───────────────────────────────────
Error in `if (endsWith(x_dep, "()")) {
    new_expr <- gsub("\\(\\)$", "", x_dep)
    new_expr <- str2lang(new_expr)
    .eval_expr(new_expr, data = data, ignore_case = ignore_case, 
        regex = regex, verbose)
} else {
    eval(expr, envir = data)
}`: the condition has length > 1
Backtrace:
    ▆
 1. ├─report::report(model) at test-report.aov.R:3:2
 2. └─report:::report.anova(model)
 3.   ├─report::report_table(x, ...)
 4.   └─report:::report_table.anova(x, ...)
 5.     └─datawizard::data_remove(...)
 6.       └─datawizard:::.select_nse(...)
 7.         └─datawizard:::.eval_expr(...)
 8.           └─datawizard:::.eval_call(...)
 9.             └─datawizard:::.select_context(x, data, ignore_case, regex, verbose)
── Error ('test-report.ivreg.R:13'): report-survreg ────────────────────────────
`report(ivr)` threw an unexpected error.
Message: the condition has length > 1
Class:   simpleError/error/condition
── Error ('test-report.lavaan.R:16'): model-lavaan detailed table ──────────────
`report_table(model)` threw an unexpected error.
Message: the condition has length > 1
Class:   simpleError/error/condition
── Error ('test-report.lavaan.R:20'): model-lavaan detailed performance ────────
`report_performance(model)` threw an unexpected error.
Message: the condition has length > 1
Class:   simpleError/error/condition
── Error ('test-report.lmer.R:19'): report-lmer ────────────────────────────────
`report(m1)` threw an unexpected error.
Message: the condition has length > 1
Class:   simpleError/error/condition
── Error ('test-report.lmer.R:21'): report-lmer ────────────────────────────────
`report(m2)` threw an unexpected error.
Message: the condition has length > 1
Class:   simpleError/error/condition
── Error ('test-report.stanreg.R:6'): model-stanreg ────────────────────────────
Error in `if (endsWith(x_dep, "()")) {
    new_expr <- gsub("\\(\\)$", "", x_dep)
    new_expr <- str2lang(new_expr)
    .eval_expr(new_expr, data = data, ignore_case = ignore_case, 
        regex = regex, verbose)
} else {
    eval(expr, envir = data)
}`: the condition has length > 1
Backtrace:
    ▆
 1. ├─report::report(model, centrality = "mean") at test-report.stanreg.R:6:4
 2. └─report:::report.stanreg(model, centrality = "mean")
 3.   ├─report::report_table(x, include_effectsize = FALSE, ...)
 4.   └─report:::report_table.stanreg(...)
 5.     └─datawizard::data_remove(...)
 6.       └─datawizard:::.select_nse(...)
 7.         └─datawizard:::.eval_expr(...)
 8.           └─datawizard:::.eval_call(...)
 9.             └─datawizard:::.select_context(x, data, ignore_case, regex, verbose)
── Error ('test-report.stanreg.R:34'): model-stanreg detailed ──────────────────
`report(model)` threw an unexpected error.
Message: the condition has length > 1
Class:   simpleError/error/condition
── Error ('test-report.survreg.R:12'): report-survreg ──────────────────────────
`report(mod_survreg)` threw an unexpected error.
Message: the condition has length > 1
Class:   simpleError/error/condition
── Error ('test-report_intercept.R:36'): reflevel ──────────────────────────────
Error in `if (endsWith(x_dep, "()")) {
    new_expr <- gsub("\\(\\)$", "", x_dep)
    new_expr <- str2lang(new_expr)
    .eval_expr(new_expr, data = data, ignore_case = ignore_case, 
        regex = regex, verbose)
} else {
    eval(expr, envir = data)
}`: the condition has length > 1
Backtrace:
     ▆
  1. ├─testthat::expect_equal(as.character(report_intercept(m1)), "The model's intercept, corresponding to f = 3, is at 0.07 (95% CI [-0.57, 0.71], t(27) = 0.23, p = 0.819).") at test-report_intercept.R:36:4
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─report::report_intercept(m1)
  5. └─report:::report_intercept.lm(m1)
  6.   ├─report::report_table(x, ...)
  7.   └─report:::report_table.lm(x, ...)
  8.     └─datawizard::data_remove(...)
  9.       └─datawizard:::.select_nse(...)
 10.         └─datawizard:::.eval_expr(...)
 11.           └─datawizard:::.eval_call(...)
 12.             └─datawizard:::.select_context(x, data, ignore_case, regex, verbose)
── Error ('test-report_performance.R:7'): report_performance ───────────────────
Error in `if (endsWith(x_dep, "()")) {
    new_expr <- gsub("\\(\\)$", "", x_dep)
    new_expr <- str2lang(new_expr)
    .eval_expr(new_expr, data = data, ignore_case = ignore_case, 
        regex = regex, verbose)
} else {
    eval(expr, envir = data)
}`: the condition has length > 1
Backtrace:
     ▆
  1. ├─testthat::expect_equal(as.character(report_performance(x)), "The model explains a statistically significant and substantial proportion of variance (R2 = 0.84, F(5, 144) = 151.71, p < .001, adj. R2 = 0.83)") at test-report_performance.R:7:4
  2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
  3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
  4. ├─report::report_performance(x)
  5. └─report:::report_performance.lm(x)
  6.   ├─report::report_table(x, ...)
  7.   └─report:::report_table.lm(x, ...)
  8.     └─datawizard::data_remove(...)
  9.       └─datawizard:::.select_nse(...)
 10.         └─datawizard:::.eval_expr(...)
 11.           └─datawizard:::.eval_call(...)
 12.             └─datawizard:::.select_context(x, data, ignore_case, regex, verbose)

[ FAIL 11 | WARN 4 | SKIP 5 | PASS 59 ]
Error: Test failures
Execution halted
